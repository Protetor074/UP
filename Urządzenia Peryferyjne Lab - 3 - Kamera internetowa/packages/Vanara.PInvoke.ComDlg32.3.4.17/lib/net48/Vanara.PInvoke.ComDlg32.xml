<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.ComDlg32</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.ComDlg32">
            <summary>Items from the ComDlg32.dll</summary>
            <summary>Items from the ComDlg32.dll</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.CC">
            <summary>
            A set of bit flags that you can use to initialize the Color dialog box. When the dialog box returns, it sets these flags to
            indicate the user's input.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_ANYCOLOR">
            <summary>Causes the dialog box to display all available colors in the set of basic colors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_ENABLEHOOK">
            <summary>
            Enables the hook procedure specified in the lpfnHook member of this structure. This flag is used only to initialize the
            dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_ENABLETEMPLATE">
            <summary>
            The hInstance and lpTemplateName members specify a dialog box template to use in place of the default template. This flag is
            used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_ENABLETEMPLATEHANDLE">
            <summary>
            The hInstance member identifies a data block that contains a preloaded dialog box template. The system ignores the
            lpTemplateName member if this flag is specified. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_FULLOPEN">
            <summary>
            Causes the dialog box to display the additional controls that allow the user to create custom colors. If this flag is not
            set, the user must click the Define Custom Color button to display the custom color controls.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_PREVENTFULLOPEN">
            <summary>Disables the Define Custom Color button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_RGBINIT">
            <summary>Causes the dialog box to use the color specified in the rgbResult member as the initial color selection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CC.CC_SOLIDCOLOR">
            <summary>Causes the dialog box to display only solid colors in the set of basic colors.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.ERR">
            <summary>
            An error code returned by the CommDlgExtendedError function.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CDERR</term>
            <term>General error codes that can be returned for any of the common dialog box functions.</term>
            </item>
            <item>
            <term>PDERR</term>
            <term>Error codes returned for the PrintDlg function.</term>
            </item>
            <item>
            </item>
            <item>
            <term>CFERR</term>
            <term>Error codes returned for the ChooseFont function.</term>
            </item>
            <item>
            <term>FNERR</term>
            <term>Error codes returned for the GetOpenFileName and GetSaveFileName functions.</term>
            </item>
            <item>
            <term>FRERR</term>
            <term>Error codes returned for the FindText and ReplaceText functions.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_DIALOGFAILURE">
            <summary>
            The dialog box could not be created. The common dialog box function's call to the DialogBox function failed. For example,
            this error occurs if the common dialog box call specifies an invalid window handle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_FINDRESFAILURE">
            <summary>
            The common dialog box function failed to find a specified resource.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_INITIALIZATION">
            <summary>
             The common dialog box function failed during initialization. This error often occurs when sufficient memory is not available.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_LOADRESFAILURE">
            <summary>
            The common dialog box function failed to load a specified resource.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_LOADSTRFAILURE">
            <summary>
            The common dialog box function failed to load a specified string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_LOCKRESFAILURE">
            <summary>
            The common dialog box function failed to lock a specified resource.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_MEMALLOCFAILURE">
            <summary>
            The common dialog box function was unable to allocate memory for internal structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_MEMLOCKFAILURE">
            <summary>
            The common dialog box function was unable to lock the memory associated with a handle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_NOHINSTANCE">
            <summary>
            The <c>ENABLETEMPLATE</c> flag was set in the <c>Flags</c> member of the initialization structure for the corresponding common
            dialog box, but you failed to provide a corresponding instance handle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_NOHOOK">
            <summary>
            The <c>ENABLEHOOK</c> flag was set in the <c>Flags</c> member of the initialization structure for the corresponding common
            dialog box, but you failed to provide a pointer to a corresponding hook procedure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_NOTEMPLATE">
            <summary>
            The <c>ENABLETEMPLATE</c> flag was set in the <c>Flags</c> member of the initialization structure for the corresponding common dialog
            box, but you failed to provide a corresponding template.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_REGISTERMSGFAIL">
            <summary>
            The RegisterWindowMessage function returned an error code when it was called by the common dialog box function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CDERR_STRUCTSIZE">
            <summary>
            The <c>lStructSize</c> member of the initialization structure for the corresponding common dialog box is invalid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_CREATEICFAILURE">
            <summary>
            The PrintDlg function failed when it attempted to create an information context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_DEFAULTDIFFERENT">
            <summary>
            You called the PrintDlg function with the <c>DN_DEFAULTPRN</c> flag specified in the <c>wDefault</c> member of the <c>DEVNAMES</c> structure,
            but the printer described by the other structure members did not match the current default printer. This error occurs when
            you store the <c>DEVNAMES</c> structure, and the user changes the default printer by using the Control Panel.
            <para>To use the printer described by the <c>DEVNAMES</c> structure, clear the <c>DN_DEFAULTPRN</c> flag and call PrintDlg again.</para>
            <para>To use the default printer, replace the <c>DEVNAMES</c> structure (and the structure, if one exists) with <c>NULL</c>; and call PrintDlg again.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_DNDMMISMATCH">
            <summary>
            The data in the <c>DEVMODE</c> and <c>DEVNAMES</c> structures describes two different printers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_GETDEVMODEFAIL">
            <summary>
            The printer driver failed to initialize a <c>DEVMODE</c> structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_INITFAILURE">
            <summary>
            The PrintDlg function failed during initialization, and there is no more specific extended error code to describe the failure.
            This is the generic default error code for the function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_LOADDRVFAILURE">
            <summary>
            The PrintDlg function failed to load the device driver for the specified printer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_NODEFAULTPRN">
            <summary>
            A default printer does not exist.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_NODEVICES">
            <summary>
            No printer drivers were found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_PARSEFAILURE">
            <summary>
            The PrintDlg function failed to parse the strings in the [devices] section of the WIN.INI file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_PRINTERNOTFOUND">
            <summary>
            The [devices] section of the WIN.INI file did not contain an entry for the requested printer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_RETDEFFAILURE">
            <summary>
            The <c>PD_RETURNDEFAULT</c> flag was specified in the Flags member of the <c>PRINTDLG</c> structure, but the <c>hDevMode</c> or <c>hDevNames</c> member was not <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.PDERR_SETUPFAILURE">
            <summary>
            The PrintDlg function failed to load the required resources.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CFERR_MAXLESSTHANMIN">
            <summary>
            The size specified in the <c>nSizeMax</c> member of the <c>CHOOSEFONT</c> structure is less than the size specified in the <c>nSizeMin</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.CFERR_NOFONTS">
            <summary>
            No fonts exist.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.FNERR_BUFFERTOOSMALL">
            <summary>
            The buffer pointed to by the <c>lpstrFile</c> member of the <c>OPENFILENAME</c> structure is too small for the file name specified
            by the user. The first two bytes of the <c>lpstrFile</c> buffer contain an integer value specifying the size required to receive
            the full name, in characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.FNERR_INVALIDFILENAME">
            <summary>
            A file name is invalid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.FNERR_SUBCLASSFAILURE">
            <summary>
            An attempt to subclass a list box failed because sufficient memory was not available.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.ERR.FRERR_BUFFERLENGTHZERO">
            <summary>
            A member of the <c>FINDREPLACE</c> structure points to an invalid buffer.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.CF">
            <summary>
            A set of bit flags that you can use to initialize the Font dialog box. When the dialog box returns, it sets these flags to
            indicate the user input.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_APPLY">
            <summary>
            Causes the dialog box to display the Apply button. You should provide a hook procedure to process WM_COMMAND messages for
            the Apply button. The hook procedure can send the WM_CHOOSEFONT_GETLOGFONT message to the dialog box to retrieve the address
            of the structure that contains the current selections for the font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_ANSIONLY">
            <summary>
            This flag is obsolete. To limit font selections to all scripts except those that use the OEM or Symbol character sets, use
            CF_SCRIPTSONLY. To get the original CF_ANSIONLY behavior, use CF_SELECTSCRIPT and specify ANSI_CHARSET in the lfCharSet
            member of the LOGFONT structure pointed to by lpLogFont.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_BOTH">
            <summary>
            This flag is ignored for font enumeration.
            <para>
            Windows Vista and Windows XP/2000: Causes the dialog box to list the available printer and screen fonts. The hDC member is a
            handle to the device context or information context associated with the printer. This flag is a combination of the
            CF_SCREENFONTS and CF_PRINTERFONTS flags.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_EFFECTS">
            <summary>
            Causes the dialog box to display the controls that allow the user to specify strikeout, underline, and text color options.
            If this flag is set, you can use the rgbColors member to specify the initial text color. You can use the lfStrikeOut and
            lfUnderline members of the structure pointed to by lpLogFont to specify the initial settings of the strikeout and underline
            check boxes. ChooseFont can use these members to return the user's selections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_ENABLEHOOK">
            <summary>Enables the hook procedure specified in the lpfnHook member of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_ENABLETEMPLATE">
            <summary>
            Indicates that the hInstance and lpTemplateName members specify a dialog box template to use in place of the default template.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_ENABLETEMPLATEHANDLE">
            <summary>
            Indicates that the hInstance member identifies a data block that contains a preloaded dialog box template. The system
            ignores the lpTemplateName member if this flag is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_FIXEDPITCHONLY">
            <summary>ChooseFont should enumerate and allow selection of only fixed-pitch fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_FORCEFONTEXIST">
            <summary>
            ChooseFont should indicate an error condition if the user attempts to select a font or style that is not listed in the
            dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_INACTIVEFONTS">
            <summary>
            ChooseFont should additionally display fonts that are set to Hide in Fonts Control Panel.
            <para>Windows Vista and Windows XP/2000: This flag is not supported until Windows 7.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_INITTOLOGFONTSTRUCT">
            <summary>ChooseFont should use the structure pointed to by the lpLogFont member to initialize the dialog box controls.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_LIMITSIZE">
            <summary>ChooseFont should select only font sizes within the range specified by the nSizeMin and nSizeMax members.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOOEMFONTS">
            <summary>Same as the CF_NOVECTORFONTS flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOFACESEL">
            <summary>
            When using a LOGFONT structure to initialize the dialog box controls, use this flag to prevent the dialog box from
            displaying an initial selection for the font name combo box. This is useful when there is no single font name that applies
            to the text selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOSCRIPTSEL">
            <summary>
            Disables the Script combo box. When this flag is set, the lfCharSet member of the LOGFONT structure is set to
            DEFAULT_CHARSET when ChooseFont returns. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOSIMULATIONS">
            <summary>ChooseFont should not display or allow selection of font simulations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOSIZESEL">
            <summary>
            When using a structure to initialize the dialog box controls, use this flag to prevent the dialog box from displaying an
            initial selection for the Font Size combo box. This is useful when there is no single font size that applies to the text selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOSTYLESEL">
            <summary>
            When using a LOGFONT structure to initialize the dialog box controls, use this flag to prevent the dialog box from
            displaying an initial selection for the Font Style combo box. This is useful when there is no single font style that applies
            to the text selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOVECTORFONTS">
            <summary>ChooseFont should not allow vector font selections.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_NOVERTFONTS">
            <summary>Causes the Font dialog box to list only horizontally oriented fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_PRINTERFONTS">
            <summary>
            This flag is ignored for font enumeration.
            <para>
            Windows Vista and Windows XP/2000: Causes the dialog box to list only the fonts supported by the printer associated with the
            device context or information context identified by the hDC member. It also causes the font type description label to appear
            at the bottom of the Font dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_SCALABLEONLY">
            <summary>
            Specifies that ChooseFont should allow only the selection of scalable fonts. Scalable fonts include vector fonts, scalable
            printer fonts, TrueType fonts, and fonts scaled by other technologies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_SCREENFONTS">
            <summary>
            This flag is ignored for font enumeration.
            <para>Windows Vista and Windows XP/2000: Causes the dialog box to list only the screen fonts supported by the system.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_SCRIPTSONLY">
            <summary>
            ChooseFont should allow selection of fonts for all non-OEM and Symbol character sets, as well as the ANSI character set.
            This supersedes the CF_ANSIONLY value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_SELECTSCRIPT">
            <summary>
            When specified on input, only fonts with the character set identified in the lfCharSet member of the LOGFONT structure are
            displayed. The user will not be allowed to change the character set specified in the Scripts combo box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_TTONLY">
            <summary>ChooseFont should only enumerate and allow the selection of TrueType fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_USESTYLE">
            <summary>
            The lpszStyle member is a pointer to a buffer that contains style data that ChooseFont should use to initialize the Font
            Style combo box. When the user closes the dialog box, ChooseFont copies style data for the user's selection to this buffer.
            <para>
            Note To globalize your application, you should specify the style by using the lfWeight and lfItalic members of the LOGFONT
            structure pointed to by lpLogFont. The style name may change depending on the system user interface language.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CF.CF_WYSIWYG">
            <summary>
            Obsolete. ChooseFont ignores this flag.
            <para>
            Windows Vista and Windows XP/2000: ChooseFont should allow only the selection of fonts available on both the printer and the
            display. If this flag is specified, the CF_SCREENSHOTS and CF_PRINTERFONTS, or CF_BOTH flags should also be specified.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.DN">
            <summary>Indicates whether the strings contained in the DEVNAMES structure identify the default printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.DN.DN_DEFAULTPRN">
            <summary>
            The DN_DEFAULTPRN flag is used if the default printer was selected. If a specific printer is selected, the flag is not used.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.FR">
            <summary>
            A set of bit flags that you can use to initialize the dialog box. The dialog box sets these flags when it sends the
            FINDMSGSTRING registered message to indicate the user's input.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_DIALOGTERM">
            <summary>
            If set in a FINDMSGSTRING message, indicates that the dialog box is closing. When you receive a message with this flag set,
            the dialog box handle returned by the FindText or ReplaceText function is no longer valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_DOWN">
            <summary>
            If set, the Down button of the direction radio buttons in a Find dialog box is selected indicating that you should search
            from the current location to the end of the document. If not set, the Up button is selected so you should search to the
            beginning of the document. You can set this flag to initialize the dialog box. If set in a FINDMSGSTRING message, indicates
            the user's selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_ENABLEHOOK">
            <summary>
            Enables the hook function specified in the lpfnHook member. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_ENABLETEMPLATE">
            <summary>
            Indicates that the hInstance and lpTemplateName members specify a dialog box template to use in place of the default
            template. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_ENABLETEMPLATEHANDLE">
            <summary>
            Indicates that the hInstance member identifies a data block that contains a preloaded dialog box template. The system
            ignores the lpTemplateName member if this flag is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_FINDNEXT">
            <summary>
            If set in a FINDMSGSTRING message, indicates that the user clicked the Find Next button in a Find or Replace dialog box. The
            lpstrFindWhat member specifies the string to search for.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_HIDEUPDOWN">
            <summary>If set when initializing a Find dialog box, hides the search direction radio buttons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_HIDEMATCHCASE">
            <summary>If set when initializing a Find or Replace dialog box, hides the Match Case check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_HIDEWHOLEWORD">
            <summary>If set when initializing a Find or Replace dialog box, hides the Match Whole Word Only check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_MATCHCASE">
            <summary>
            If set, the Match Case check box is selected indicating that the search should be case-sensitive. If not set, the check box
            is unselected so the search should be case-insensitive. You can set this flag to initialize the dialog box. If set in a
            FINDMSGSTRING message, indicates the user's selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_NOMATCHCASE">
            <summary>If set when initializing a Find or Replace dialog box, disables the Match Case check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_NOUPDOWN">
            <summary>If set when initializing a Find dialog box, disables the search direction radio buttons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_NOWHOLEWORD">
            <summary>If set when initializing a Find or Replace dialog box, disables the Whole Word check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_REPLACE">
            <summary>
            If set in a FINDMSGSTRING message, indicates that the user clicked the Replace button in a Replace dialog box. The
            lpstrFindWhat member specifies the string to be replaced and the lpstrReplaceWith member specifies the replacement string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_REPLACEALL">
            <summary>
            If set in a FINDMSGSTRING message, indicates that the user clicked the Replace All button in a Replace dialog box. The
            lpstrFindWhat member specifies the string to be replaced and the lpstrReplaceWith member specifies the replacement string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_WHOLEWORD">
            <summary>
            If set, the Match Whole Word Only check box is selected indicating that you should search only for whole words that match
            the search string. If not set, the check box is unselected so you should also search for word fragments that match the
            search string. You can set this flag to initialize the dialog box. If set in a FINDMSGSTRING message, indicates the user's selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_RAW">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_SHOWWRAPAROUND">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_NOWRAPAROUND">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_WRAPAROUND">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_MATCHDIAC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_MATCHKASHIDA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FR.FR_MATCHALEFHAMZA">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.OFN">
            <summary>
            A set of bit flags you can use to initialize the dialog box. When the dialog box returns, it sets these flags to indicate the
            user's input.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_ALLOWMULTISELECT">
            <summary>
            The File Name list box allows multiple selections. If you also set the OFN_EXPLORER flag, the dialog box uses the
            Explorer-style user interface; otherwise, it uses the old-style user interface.
            <para>
            If the user selects more than one file, the lpstrFile buffer returns the path to the current directory followed by the file
            names of the selected files. The nFileOffset member is the offset, in bytes or characters, to the first file name, and the
            nFileExtension member is not used. For Explorer-style dialog boxes, the directory and file name strings are NULL separated,
            with an extra NULL character after the last file name. This format enables the Explorer-style dialog boxes to return long
            file names that include spaces. For old-style dialog boxes, the directory and file name strings are separated by spaces and
            the function uses short file names for file names with spaces. You can use the FindFirstFile function to convert between
            long and short file names.
            </para>
            <para>
            If you specify a custom template for an old-style dialog box, the definition of the File Name list box must contain the
            LBS_EXTENDEDSEL value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_CREATEPROMPT">
            <summary>
            If the user specifies a file that does not exist, this flag causes the dialog box to prompt the user for permission to
            create the file. If the user chooses to create the file, the dialog box closes and the function returns the specified name;
            otherwise, the dialog box remains open. If you use this flag with the OFN_ALLOWMULTISELECT flag, the dialog box allows the
            user to specify only one nonexistent file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_DONTADDTORECENT">
            <summary>
            Prevents the system from adding a link to the selected file in the file system directory that contains the user's most
            recently used documents. To retrieve the location of this directory, call the SHGetSpecialFolderLocation function with the
            CSIDL_RECENT flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_ENABLEHOOK">
            <summary>Enables the hook function specified in the lpfnHook member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_ENABLEINCLUDENOTIFY">
            <summary>
            Causes the dialog box to send CDN_INCLUDEITEM notification messages to your OFNHookProc hook procedure when the user opens a
            folder. The dialog box sends a notification for each item in the newly opened folder. These messages enable you to control
            which items the dialog box displays in the folder's item list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_ENABLESIZING">
            <summary>
            Enables the Explorer-style dialog box to be resized using either the mouse or the keyboard. By default, the Explorer-style
            Open and Save As dialog boxes allow the dialog box to be resized regardless of whether this flag is set. This flag is
            necessary only if you provide a hook procedure or custom template. The old-style dialog box does not permit resizing.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_ENABLETEMPLATE">
            <summary>
            The lpTemplateName member is a pointer to the name of a dialog template resource in the module identified by the hInstance
            member. If the OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box that is a child of
            the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an
            old-style dialog box that replaces the default dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_ENABLETEMPLATEHANDLE">
            <summary>
            The hInstance member identifies a data block that contains a preloaded dialog box template. The system ignores
            lpTemplateName if this flag is specified. If the OFN_EXPLORER flag is set, the system uses the specified template to create
            a dialog box that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses
            the template to create an old-style dialog box that replaces the default dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_EXPLORER">
            <summary>
            Indicates that any customizations made to the Open or Save As dialog box use the Explorer-style customization methods. For
            more information, see Explorer-Style Hook Procedures and Explorer-Style Custom Templates.
            <para>
            By default, the Open and Save As dialog boxes use the Explorer-style user interface regardless of whether this flag is set.
            This flag is necessary only if you provide a hook procedure or custom template, or set the OFN_ALLOWMULTISELECT flag.
            </para>
            <para>
            If you want the old-style user interface, omit the OFN_EXPLORER flag and provide a replacement old-style template or hook
            procedure. If you want the old style but do not need a custom template or hook procedure, simply provide a hook procedure
            that always returns FALSE.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_EXTENSIONDIFFERENT">
            <summary>
            The user typed a file name extension that differs from the extension specified by lpstrDefExt. The function does not use
            this flag if lpstrDefExt is NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_FILEMUSTEXIST">
            <summary>
            The user can type only names of existing files in the File Name entry field. If this flag is specified and the user enters
            an invalid name, the dialog box procedure displays a warning in a message box. If this flag is specified, the
            OFN_PATHMUSTEXIST flag is also used. This flag can be used in an Open dialog box. It cannot be used with a Save As dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_FORCESHOWHIDDEN">
            <summary>
            Forces the showing of system and hidden files, thus overriding the user setting to show or not show hidden files. However, a
            file that is marked both system and hidden is not shown.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_HIDEREADONLY">
            <summary>Hides the Read Only check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_LONGNAMES">
            <summary>
            For old-style dialog boxes, this flag causes the dialog box to use long file names. If this flag is not specified, or if the
            OFN_ALLOWMULTISELECT flag is also set, old-style dialog boxes use short file names (8.3 format) for file names with spaces.
            Explorer-style dialog boxes ignore this flag and always display long file names.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NOCHANGEDIR">
            <summary>
            Restores the current directory to its original value if the user changed the directory while searching for files.
            <para>This flag is ineffective for GetOpenFileName.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NODEREFERENCELINKS">
            <summary>
            Directs the dialog box to return the path and file name of the selected shortcut (.LNK) file. If this value is not
            specified, the dialog box returns the path and file name of the file referenced by the shortcut.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NOLONGNAMES">
            <summary>
            For old-style dialog boxes, this flag causes the dialog box to use short file names (8.3 format). Explorer-style dialog
            boxes ignore this flag and always display long file names.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NONETWORKBUTTON">
            <summary>Hides and disables the Network button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NOREADONLYRETURN">
            <summary>The returned file does not have the Read Only check box selected and is not in a write-protected directory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NOTESTFILECREATE">
            <summary>
            The file is not created before the dialog box is closed. This flag should be specified if the application saves the file on
            a create-nonmodify network share. When an application specifies this flag, the library does not check for write protection,
            a full disk, an open drive door, or network protection. Applications using this flag must perform file operations carefully,
            because a file cannot be reopened once it is closed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_NOVALIDATE">
            <summary>
            The common dialog boxes allow invalid characters in the returned file name. Typically, the calling application uses a hook
            procedure that checks the file name by using the FILEOKSTRING message. If the text box in the edit control is empty or
            contains nothing but spaces, the lists of files and directories are updated. If the text box in the edit control contains
            anything else, nFileOffset and nFileExtension are set to values generated by parsing the text. No default extension is added
            to the text, nor is text copied to the buffer specified by lpstrFileTitle. If the value specified by nFileOffset is less
            than zero, the file name is invalid. Otherwise, the file name is valid, and nFileExtension and nFileOffset can be used as if
            the OFN_NOVALIDATE flag had not been specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_OVERWRITEPROMPT">
            <summary>
            Causes the Save As dialog box to generate a message box if the selected file already exists. The user must confirm whether
            to overwrite the file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_PATHMUSTEXIST">
            <summary>
            The user can type only valid paths and file names. If this flag is used and the user types an invalid path and file name in
            the File Name entry field, the dialog box function displays a warning in a message box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_READONLY">
            <summary>
            Causes the Read Only check box to be selected initially when the dialog box is created. This flag indicates the state of the
            Read Only check box when the dialog box is closed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_SHAREAWARE">
            <summary>
            Specifies that if a call to the OpenFile function fails because of a network sharing violation, the error is ignored and the
            dialog box returns the selected file name. If this flag is not set, the dialog box notifies your hook procedure when a
            network sharing violation occurs for the file name specified by the user. If you set the OFN_EXPLORER flag, the dialog box
            sends the CDN_SHAREVIOLATION message to the hook procedure. If you do not set OFN_EXPLORER, the dialog box sends the
            SHAREVISTRING registered message to the hook procedure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN.OFN_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button. An Explorer-style dialog box sends a
            CDN_HELP notification message to your hook procedure when the user clicks the Help button.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.OFN_EX">
            <summary>A set of bit flags you can use to initialize the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFN_EX.OFN_EX_NOPLACESBAR">
            <summary>
            If this flag is set, the places bar is not displayed. If this flag is not set, Explorer-style dialog boxes include a places
            bar containing icons for commonly-used folders, such as Favorites and Desktop.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PD">
            <summary>Initializes the Print dialog box. When the dialog box returns, it sets these flags to indicate the user's input.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ALLPAGES">
            <summary>
            The default flag that indicates that the All radio button is initially selected. This flag is used as a placeholder to
            indicate that the PD_PAGENUMS and PD_SELECTION flags are not specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_COLLATE">
            <summary>
            If this flag is set, the Collate check box is selected.
            <para>
            If this flag is set when the PrintDlg function returns, the application must simulate collation of multiple copies. For more
            information, see the description of the PD_USEDEVMODECOPIESANDCOLLATE flag.
            </para>
            <para>See PD_NOPAGENUMS.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_DISABLEPRINTTOFILE">
            <summary>Disables the Print to File check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ENABLEPRINTHOOK">
            <summary>
            Enables the hook procedure specified in the lpfnPrintHook member. This enables the hook procedure for the Print dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ENABLEPRINTTEMPLATE">
            <summary>
            Indicates that the hInstance and lpPrintTemplateName members specify a replacement for the default Print dialog box template.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ENABLEPRINTTEMPLATEHANDLE">
            <summary>
            Indicates that the hPrintTemplate member identifies a data block that contains a preloaded dialog box template. This
            template replaces the default template for the Print dialog box. The system ignores the lpPrintTemplateName member if this
            flag is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ENABLESETUPHOOK">
            <summary>
            Enables the hook procedure specified in the lpfnSetupHook member. This enables the hook procedure for the Print Setup dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ENABLESETUPTEMPLATE">
            <summary>
            Indicates that the hInstance and lpSetupTemplateName members specify a replacement for the default Print Setup dialog box template.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_ENABLESETUPTEMPLATEHANDLE">
            <summary>
            Indicates that the hSetupTemplate member identifies a data block that contains a preloaded dialog box template. This
            template replaces the default template for the Print Setup dialog box. The system ignores the lpSetupTemplateName member if
            this flag is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_HIDEPRINTTOFILE">
            <summary>Hides the Print to File check box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_NONETWORKBUTTON">
            <summary>Hides and disables the Network button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_NOPAGENUMS">
            <summary>
            Disables the Pages radio button and the associated edit controls. Also, it causes the Collate check box to appear in the dialog.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_NOSELECTION">
            <summary>Disables the Selection radio button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_NOWARNING">
            <summary>Prevents the warning message from being displayed when there is no default printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_PAGENUMS">
            <summary>
            If this flag is set, the Pages radio button is selected. If this flag is set when the PrintDlg function returns, the
            nFromPage and nToPage members indicate the starting and ending pages specified by the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_PRINTSETUP">
            <summary>Causes the system to display the Print Setup dialog box rather than the Print dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_PRINTTOFILE">
            <summary>
            If this flag is set, the Print to File check box is selected. If this flag is set when the PrintDlg function returns, the
            offset indicated by the wOutputOffset member of the DEVNAMES structure contains the string "FILE:". When you call the
            StartDoc function to start the printing operation, specify this "FILE:" string in the lpszOutput member of the DOCINFO
            structure. Specifying this string causes the print subsystem to query the user for the name of the output file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_RETURNDC">
            <summary>
            Causes PrintDlg to return a device context matching the selections the user made in the dialog box. The device context is
            returned in hDC.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_RETURNDEFAULT">
            <summary>
            If this flag is set, the PrintDlg function does not display the dialog box. Instead, it sets the hDevNames and hDevMode
            members to handles to DEVMODE and DEVNAMES structures that are initialized for the system default printer. Both hDevNames
            and hDevMode must be NULL, or PrintDlg returns an error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_RETURNIC">
            <summary>
            Similar to the PD_RETURNDC flag, except this flag returns an information context rather than a device context. If neither
            PD_RETURNDC nor PD_RETURNIC is specified, hDC is undefined on output.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_SELECTION">
            <summary>
            If this flag is set, the Selection radio button is selected. If neither PD_PAGENUMS nor PD_SELECTION is set, the All radio
            button is selected.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_USEDEVMODECOPIES">
            <summary>Same as PD_USEDEVMODECOPIESANDCOLLATE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_USEDEVMODECOPIESANDCOLLATE">
            <summary>
            This flag indicates whether your application supports multiple copies and collation. Set this flag on input to indicate that
            your application does not support multiple copies and collation. In this case, the nCopies member of the PRINTDLG structure
            always returns 1, and PD_COLLATE is never set in the Flags member.
            <para>
            If this flag is not set, the application is responsible for printing and collating multiple copies. In this case, the
            nCopies member of the PRINTDLG structure indicates the number of copies the user wants to print, and the PD_COLLATE flag in
            the Flags member indicates whether the user wants collation.
            </para>
            <para>
            Regardless of whether this flag is set, an application can determine from nCopies and PD_COLLATE how many copies to render
            and whether to print them collated.
            </para>
            <para>
            If this flag is set and the printer driver does not support multiple copies, the Copies edit control is disabled. Similarly,
            if this flag is set and the printer driver does not support collation, the Collate check box is disabled.
            </para>
            <para>
            The dmCopies and dmCollate members of the DEVMODE structure contain the copies and collate information used by the printer
            driver. If this flag is set and the printer driver supports multiple copies, the dmCopies member indicates the number of
            copies requested by the user. If this flag is set and the printer driver supports collation, the dmCollate member of the
            DEVMODE structure indicates whether the user wants collation. If this flag is not set, the dmCopies member always returns 1,
            and the dmCollate member is always zero.
            </para>
            <para>
            Known issue on Windows 2000/XP/2003: If this flag is not set before calling PrintDlg, PrintDlg might swap nCopies and
            dmCopies values when it returns. The workaround for this issue is use dmCopies if its value is larger than 1, else, use
            nCopies, for you to to get the actual number of copies to be printed when PrintDlg returns.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_CURRENTPAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_NOCURRENTPAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_EXCLUSIONFLAGS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD.PD_USELARGETEMPLATE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PD_EXCL">
            <summary>
            A set of bit flags that can exclude items from the printer driver property pages in the Print property sheet. This value is used
            only if the PD_EXCLUSIONFLAGS flag is set in the Flags member. Exclusion flags should be used only if the item to be excluded
            will be included on either the General page or on an application-defined page in the Print property sheet.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD_EXCL.PD_EXCL_COPIESANDCOLLATE">
            <summary>
            Excludes the Copies and Collate controls from the printer driver property pages in a Print property sheet. This flag should
            always be set when the application uses the default Copies and Collate controls provided by the lower portion of the General
            page of the Print property sheet.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PD_RESULT">
            <summary>
            On input, set this member to zero. If the PrintDlgEx function returns S_OK, dwResultAction contains the outcome of the dialog.
            If PrintDlgEx returns an error, this member should be ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD_RESULT.PD_RESULT_CANCEL">
            <summary>The user clicked the Cancel button. The information in the PRINTDLGEX structure is unchanged.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD_RESULT.PD_RESULT_PRINT">
            <summary>The user clicked the Print button. The PRINTDLGEX structure contains the information specified by the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PD_RESULT.PD_RESULT_APPLY">
            <summary>
            The user clicked the Apply button and later clicked the Cancel button. This indicates that the user wants to apply the
            changes made in the property sheet, but does not want to print yet. The PRINTDLGEX structure contains the information
            specified by the user at the time the Apply button was clicked.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PSD">
            <summary>
            A set of bit flags that you can use to initialize the Page Setup dialog box. When the dialog box returns, it sets these flags to
            indicate the user's input.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_DEFAULTMINMARGINS">
            <summary>
            Sets the minimum values that the user can specify for the page margins to be the minimum margins allowed by the printer.
            This is the default. This flag is ignored if the PSD_MARGINS and PSD_MINMARGINS flags are also specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_DISABLEMARGINS">
            <summary>Disables the margin controls, preventing the user from setting the margins.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_DISABLEORIENTATION">
            <summary>Disables the orientation controls, preventing the user from setting the page orientation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_DISABLEPAGEPAINTING">
            <summary>
            Prevents the dialog box from drawing the contents of the sample page. If you enable a PagePaintHook hook procedure, you can
            still draw the contents of the sample page.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_DISABLEPAPER">
            <summary>Disables the paper controls, preventing the user from setting page parameters such as the paper size and source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_DISABLEPRINTER">
            <summary>
            Obsolete.
            <para>
            Windows XP/2000: Disables the Printer button, preventing the user from invoking a dialog box that contains additional
            printer setup information.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_ENABLEPAGEPAINTHOOK">
            <summary>Enables the hook procedure specified in the lpfnPagePaintHook member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_ENABLEPAGESETUPHOOK">
            <summary>Enables the hook procedure specified in the lpfnPageSetupHook member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_ENABLEPAGESETUPTEMPLATE">
            <summary>
            Indicates that the hInstance and lpPageSetupTemplateName members specify a dialog box template to use in place of the
            default template.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_ENABLEPAGESETUPTEMPLATEHANDLE">
            <summary>
            Indicates that the hPageSetupTemplate member identifies a data block that contains a preloaded dialog box template. The
            system ignores the lpPageSetupTemplateName member if this flag is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_INHUNDREDTHSOFMILLIMETERS">
            <summary>
            Indicates that hundredths of millimeters are the unit of measurement for margins and paper size. The values in the rtMargin,
            rtMinMargin, and ptPaperSize members are in hundredths of millimeters. You can set this flag on input to override the
            default unit of measurement for the user's locale. When the function returns, the dialog box sets this flag to indicate the
            units used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_INTHOUSANDTHSOFINCHES">
            <summary>
            Indicates that thousandths of inches are the unit of measurement for margins and paper size. The values in the rtMargin,
            rtMinMargin, and ptPaperSize members are in thousandths of inches. You can set this flag on input to override the default
            unit of measurement for the user's locale. When the function returns, the dialog box sets this flag to indicate the units used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_INWININIINTLMEASURE">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_MARGINS">
            <summary>
            Causes the system to use the values specified in the rtMargin member as the initial widths for the left, top, right, and
            bottom margins. If PSD_MARGINS is not set, the system sets the initial widths to one inch for all margins.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_MINMARGINS">
            <summary>
            Causes the system to use the values specified in the rtMinMargin member as the minimum allowable widths for the left, top,
            right, and bottom margins. The system prevents the user from entering a width that is less than the specified minimum. If
            PSD_MINMARGINS is not specified, the system sets the minimum allowable widths to those allowed by the printer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_NONETWORKBUTTON">
            <summary>Hides and disables the Network button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_NOWARNING">
            <summary>Prevents the system from displaying a warning message when there is no default printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_RETURNDEFAULT">
            <summary>
            PageSetupDlg does not display the dialog box. Instead, it sets the hDevNames and hDevMode members to handles to DEVMODE and
            DEVNAMES structures that are initialized for the system default printer. PageSetupDlg returns an error if either hDevNames
            or hDevMode is not NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PSD.PSD_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.CHOOSECOLOR">
            <summary>
            Contains information the ChooseColor function uses to initialize the <c>Color</c> dialog box. After the user closes the dialog
            box, the system returns information about the user's selection in this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length, in bytes, of the structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be <c>NULL</c> if the
            dialog box has no owner.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.hInstance">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            If the <c>CC_ENABLETEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hInstance</c> is a handle to a memory
            object containing a dialog box template. If the <c>CC_ENABLETEMPLATE</c> flag is set, <c>hInstance</c> is a handle to a
            module that contains a dialog box template named by the <c>lpTemplateName</c> member. If neither
            <c>CC_ENABLETEMPLATEHANDLE</c> nor <c>CC_ENABLETEMPLATE</c> is set, this member is ignored.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.rgbResult">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>
            If the <c>CC_RGBINIT</c> flag is set, <c>rgbResult</c> specifies the color initially selected when the dialog box is
            created. If the specified color value is not among the available colors, the system selects the nearest solid color
            available. If <c>rgbResult</c> is zero or <c>CC_RGBINIT</c> is not set, the initially selected color is black. If the user
            clicks the <c>OK</c> button, <c>rgbResult</c> specifies the user's color selection. To create a COLORREF color value, use
            the RGB macro.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.lpCustColors">
            <summary>
            <para>Type: <c>COLORREF*</c></para>
            <para>
            A pointer to an array of 16 values that contain red, green, blue (RGB) values for the custom color boxes in the dialog box.
            If the user modifies these colors, the system updates the array with the new RGB values. To preserve new custom colors
            between calls to the ChooseColor function, you should allocate static memory for the array. To create a COLORREF color
            value, use the RGB macro.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags that you can use to initialize the <c>Color</c> dialog box. When the dialog box returns, it sets these
            flags to indicate the user's input. This member can be a combination of the following flags.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CC_ANYCOLOR 0x00000100</term>
            <term>Causes the dialog box to display all available colors in the set of basic colors.</term>
            </item>
            <item>
            <term>CC_ENABLEHOOK 0x00000010</term>
            <term>
            Enables the hook procedure specified in the lpfnHook member of this structure. This flag is used only to initialize the
            dialog box.
            </term>
            </item>
            <item>
            <term>CC_ENABLETEMPLATE 0x00000020</term>
            <term>
            The hInstance and lpTemplateName members specify a dialog box template to use in place of the default template. This flag is
            used only to initialize the dialog box.
            </term>
            </item>
            <item>
            <term>CC_ENABLETEMPLATEHANDLE 0x00000040</term>
            <term>
            The hInstance member identifies a data block that contains a preloaded dialog box template. The system ignores the
            lpTemplateName member if this flag is specified. This flag is used only to initialize the dialog box.
            </term>
            </item>
            <item>
            <term>CC_FULLOPEN 0x00000002</term>
            <term>
            Causes the dialog box to display the additional controls that allow the user to create custom colors. If this flag is not
            set, the user must click the Define Custom Color button to display the custom color controls.
            </term>
            </item>
            <item>
            <term>CC_PREVENTFULLOPEN 0x00000004</term>
            <term>Disables the Define Custom Color button.</term>
            </item>
            <item>
            <term>CC_RGBINIT 0x00000001</term>
            <term>Causes the dialog box to use the color specified in the rgbResult member as the initial color selection.</term>
            </item>
            <item>
            <term>CC_SHOWHELP 0x00000008</term>
            <term>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </term>
            </item>
            <item>
            <term>CC_SOLIDCOLOR 0x00000080</term>
            <term>Causes the dialog box to display only solid colors in the set of basic colors.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.lCustData">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>
            Application-defined data that the system passes to the hook procedure identified by the <c>lpfnHook</c> member. When the
            system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the
            <c>CHOOSECOLOR</c> structure specified when the dialog was created. The hook procedure can use this pointer to get the
            <c>lCustData</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.lpfnHook">
            <summary>
            <para>Type: <c>LPCCHOOKPROC</c></para>
            <para>
            A pointer to a CCHookProc hook procedure that can process messages intended for the dialog box. This member is ignored
            unless the <c>CC_ENABLEHOOK</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSECOLOR.lpTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template is
            substituted for the standard dialog box template. For numbered dialog box resources, <c>lpTemplateName</c> can be a value
            returned by the MAKEINTRESOURCE macro. This member is ignored unless the <c>CC_ENABLETEMPLATE</c> flag is set in the
            <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.CHOOSEFONT">
            <summary>
            Contains information that the ChooseFont function uses to initialize the <c>Font</c> dialog box. After the user closes the
            dialog box, the system returns information about the user's selection in this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be <c>NULL</c> if the
            dialog box has no owner.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.hDC">
            <summary>
            <para>Type: <c>HDC</c></para>
            <para>This member is ignored by the ChooseFont function.</para>
            <para>
            <c>Windows Vista and Windows XP/2000:</c> A handle to the device context or information context of the printer whose fonts
            will be listed in the dialog box. This member is used only if the <c>Flags</c> member specifies the <c>CF_PRINTERFONTS</c>
            or <c>CF_BOTH</c> flag; otherwise, this member is ignored.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.lpLogFont">
            <summary>
            <para>Type: <see cref="T:Vanara.PInvoke.LOGFONT"/>*</para>
            <para>
            A pointer to a LOGFONT structure. If you set the <c>CF_INITTOLOGFONTSTRUCT</c> flag in the <c>Flags</c> member and
            initialize the other members, the ChooseFont function initializes the dialog box with a font that matches the <c>LOGFONT</c>
            members. If the user clicks the <c>OK</c> button, <c>ChooseFont</c> sets the members of the <c>LOGFONT</c> structure based
            on the user's selections.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.iPointSize">
            <summary>
            <para>Type: <c>INT</c></para>
            <para>
            The size of the selected font, in units of 1/10 of a point. The ChooseFont function sets this value after the user closes
            the dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags that you can use to initialize the <c>Font</c> dialog box. When the dialog box returns, it sets these
            flags to indicate the user input. This member can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CF_APPLY 0x00000200L</term>
            <term>
            Causes the dialog box to display the Apply button. You should provide a hook procedure to process WM_COMMAND messages for
            the Apply button. The hook procedure can send the WM_CHOOSEFONT_GETLOGFONT message to the dialog box to retrieve the address
            of the structure that contains the current selections for the font.
            </term>
            </item>
            <item>
            <term>CF_ANSIONLY 0x00000400L</term>
            <term>
            This flag is obsolete. To limit font selections to all scripts except those that use the OEM or Symbol character sets, use
            CF_SCRIPTSONLY. To get the original CF_ANSIONLY behavior, use CF_SELECTSCRIPT and specify ANSI_CHARSET in the lfCharSet
            member of the LOGFONT structure pointed to by lpLogFont.
            </term>
            </item>
            <item>
            <term>CF_BOTH 0x00000003</term>
            <term>
            This flag is ignored for font enumeration. Windows Vista and Windows XP/2000: Causes the dialog box to list the available
            printer and screen fonts. The hDC member is a handle to the device context or information context associated with the
            printer. This flag is a combination of the CF_SCREENFONTS and CF_PRINTERFONTS flags.
            </term>
            </item>
            <item>
            <term>CF_EFFECTS 0x00000100L</term>
            <term>
            Causes the dialog box to display the controls that allow the user to specify strikeout, underline, and text color options.
            If this flag is set, you can use the rgbColors member to specify the initial text color. You can use the lfStrikeOut and
            lfUnderline members of the structure pointed to by lpLogFont to specify the initial settings of the strikeout and underline
            check boxes. ChooseFont can use these members to return the user's selections.
            </term>
            </item>
            <item>
            <term>CF_ENABLEHOOK 0x00000008L</term>
            <term>Enables the hook procedure specified in the lpfnHook member of this structure.</term>
            </item>
            <item>
            <term>CF_ENABLETEMPLATE 0x00000010L</term>
            <term>
            Indicates that the hInstance and lpTemplateName members specify a dialog box template to use in place of the default template.
            </term>
            </item>
            <item>
            <term>CF_ENABLETEMPLATEHANDLE 0x00000020L</term>
            <term>
            Indicates that the hInstance member identifies a data block that contains a preloaded dialog box template. The system
            ignores the lpTemplateName member if this flag is specified.
            </term>
            </item>
            <item>
            <term>CF_FIXEDPITCHONLY 0x00004000L</term>
            <term>ChooseFont should enumerate and allow selection of only fixed-pitch fonts.</term>
            </item>
            <item>
            <term>CF_FORCEFONTEXIST 0x00010000L</term>
            <term>
            ChooseFont should indicate an error condition if the user attempts to select a font or style that is not listed in the
            dialog box.
            </term>
            </item>
            <item>
            <term>CF_INACTIVEFONTS 0x02000000L</term>
            <term>
            ChooseFont should additionally display fonts that are set to Hide in Fonts Control Panel. Windows Vista and Windows XP/2000:
            This flag is not supported until Windows 7.
            </term>
            </item>
            <item>
            <term>CF_INITTOLOGFONTSTRUCT 0x00000040L</term>
            <term>ChooseFont should use the structure pointed to by the lpLogFont member to initialize the dialog box controls.</term>
            </item>
            <item>
            <term>CF_LIMITSIZE 0x00002000L</term>
            <term>ChooseFont should select only font sizes within the range specified by the nSizeMin and nSizeMax members.</term>
            </item>
            <item>
            <term>CF_NOOEMFONTS 0x00000800L</term>
            <term>Same as the CF_NOVECTORFONTS flag.</term>
            </item>
            <item>
            <term>CF_NOFACESEL 0x00080000L</term>
            <term>
            When using a LOGFONT structure to initialize the dialog box controls, use this flag to prevent the dialog box from
            displaying an initial selection for the font name combo box. This is useful when there is no single font name that applies
            to the text selection.
            </term>
            </item>
            <item>
            <term>CF_NOSCRIPTSEL 0x00800000L</term>
            <term>
            Disables the Script combo box. When this flag is set, the lfCharSet member of the LOGFONT structure is set to
            DEFAULT_CHARSET when ChooseFont returns. This flag is used only to initialize the dialog box.
            </term>
            </item>
            <item>
            <term>CF_NOSIMULATIONS 0x00001000L</term>
            <term>ChooseFont should not display or allow selection of font simulations.</term>
            </item>
            <item>
            <term>CF_NOSIZESEL 0x00200000L</term>
            <term>
            When using a structure to initialize the dialog box controls, use this flag to prevent the dialog box from displaying an
            initial selection for the Font Size combo box. This is useful when there is no single font size that applies to the text selection.
            </term>
            </item>
            <item>
            <term>CF_NOSTYLESEL 0x00100000L</term>
            <term>
            When using a LOGFONT structure to initialize the dialog box controls, use this flag to prevent the dialog box from
            displaying an initial selection for the Font Style combo box. This is useful when there is no single font style that applies
            to the text selection.
            </term>
            </item>
            <item>
            <term>CF_NOVECTORFONTS 0x00000800L</term>
            <term>ChooseFont should not allow vector font selections.</term>
            </item>
            <item>
            <term>CF_NOVERTFONTS 0x01000000L</term>
            <term>Causes the Font dialog box to list only horizontally oriented fonts.</term>
            </item>
            <item>
            <term>CF_PRINTERFONTS 0x00000002</term>
            <term>
            This flag is ignored for font enumeration. Windows Vista and Windows XP/2000: Causes the dialog box to list only the fonts
            supported by the printer associated with the device context or information context identified by the hDC member. It also
            causes the font type description label to appear at the bottom of the Font dialog box.
            </term>
            </item>
            <item>
            <term>CF_SCALABLEONLY 0x00020000L</term>
            <term>
            Specifies that ChooseFont should allow only the selection of scalable fonts. Scalable fonts include vector fonts, scalable
            printer fonts, TrueType fonts, and fonts scaled by other technologies.
            </term>
            </item>
            <item>
            <term>CF_SCREENFONTS 0x00000001</term>
            <term>
            This flag is ignored for font enumeration. Windows Vista and Windows XP/2000: Causes the dialog box to list only the screen
            fonts supported by the system.
            </term>
            </item>
            <item>
            <term>CF_SCRIPTSONLY 0x00000400L</term>
            <term>
            ChooseFont should allow selection of fonts for all non-OEM and Symbol character sets, as well as the ANSI character set.
            This supersedes the CF_ANSIONLY value.
            </term>
            </item>
            <item>
            <term>CF_SELECTSCRIPT 0x00400000L</term>
            <term>
            When specified on input, only fonts with the character set identified in the lfCharSet member of the LOGFONT structure are
            displayed. The user will not be allowed to change the character set specified in the Scripts combo box.
            </term>
            </item>
            <item>
            <term>CF_SHOWHELP 0x00000004L</term>
            <term>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </term>
            </item>
            <item>
            <term>CF_TTONLY 0x00040000L</term>
            <term>ChooseFont should only enumerate and allow the selection of TrueType fonts.</term>
            </item>
            <item>
            <term>CF_USESTYLE 0x00000080L</term>
            <term>
            The lpszStyle member is a pointer to a buffer that contains style data that ChooseFont should use to initialize the Font
            Style combo box. When the user closes the dialog box, ChooseFont copies style data for the user's selection to this buffer.
            </term>
            </item>
            <item>
            <term>CF_WYSIWYG 0x00008000L</term>
            <term>
            Obsolete. ChooseFont ignores this flag. Windows Vista and Windows XP/2000: ChooseFont should allow only the selection of
            fonts available on both the printer and the display. If this flag is specified, the CF_SCREENSHOTS and CF_PRINTERFONTS, or
            CF_BOTH flags should also be specified.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.rgbColors">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>
            If the <c>CF_EFFECTS</c> flag is set, <c>rgbColors</c> specifies the initial text color. When ChooseFont returns
            successfully, this member contains the RGB value of the text color that the user selected. To create a COLORREF color value,
            use the RGB macro.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.lCustData">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>
            Application-defined data that the system passes to the hook procedure identified by the <c>lpfnHook</c> member. When the
            system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the CHOOSEFONT
            structure specified when the dialog was created. The hook procedure can use this pointer to get the <c>lCustData</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.lpfnHook">
            <summary>
            <para>Type: <c>LPCFHOOKPROC</c></para>
            <para>
            A pointer to a CFHookProc hook procedure that can process messages intended for the dialog box. This member is ignored
            unless the <c>CF_ENABLEHOOK</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.lpTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template is
            substituted for the standard dialog box template. For numbered dialog box resources, <c>lpTemplateName</c> can be a value
            returned by the MAKEINTRESOURCE macro. This member is ignored unless the <c>CF_ENABLETEMPLATE</c> flag is set in the
            <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.hInstance">
            <summary>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the <c>CF_ENABLETEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hInstance</c> is a handle to a memory
            object containing a dialog box template. If the <c>CF_ENABLETEMPLATE</c> flag is set, <c>hInstance</c> is a handle to a
            module that contains a dialog box template named by the <c>lpTemplateName</c> member. If neither
            <c>CF_ENABLETEMPLATEHANDLE</c> nor <c>CF_ENABLETEMPLATE</c> is set, this member is ignored.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.lpszStyle">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The style data. If the <c>CF_USESTYLE</c> flag is specified, ChooseFont uses the data in this buffer to initialize the
            <c>Font Style</c> combo box. When the user closes the dialog box, <c>ChooseFont</c> copies the string in the <c>Font
            Style</c> combo box into this buffer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.nFontType">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The type of the selected font when ChooseFont returns. This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BOLD_FONTTYPE 0x0100</term>
            <term>
            The font weight is bold. This information is duplicated in the lfWeight member of the LOGFONT structure and is equivalent to FW_BOLD.
            </term>
            </item>
            <item>
            <term>ITALIC_FONTTYPE 0x0200</term>
            <term>The italic font attribute is set. This information is duplicated in the lfItalic member of the LOGFONT structure.</term>
            </item>
            <item>
            <term>PRINTER_FONTTYPE 0x4000</term>
            <term>The font is a printer font.</term>
            </item>
            <item>
            <term>REGULAR_FONTTYPE 0x0400</term>
            <term>
            The font weight is normal. This information is duplicated in the lfWeight member of the LOGFONT structure and is equivalent
            to FW_REGULAR.
            </term>
            </item>
            <item>
            <term>SCREEN_FONTTYPE 0x2000</term>
            <term>The font is a screen font.</term>
            </item>
            <item>
            <term>SIMULATED_FONTTYPE 0x8000</term>
            <term>The font is simulated by the graphics device interface (GDI).</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.___MISSING_ALIGNMENT__">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.nSizeMin">
            <summary>
            <para>Type: <c>INT</c></para>
            <para>
            The minimum point size a user can select. ChooseFont recognizes this member only if the <c>CF_LIMITSIZE</c> flag is specified.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.CHOOSEFONT.nSizeMax">
            <summary>
            <para>Type: <c>INT</c></para>
            <para>
            The maximum point size a user can select. ChooseFont recognizes this member only if the <c>CF_LIMITSIZE</c> flag is specified.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.DEVNAMES">
            <summary>
            Contains strings that identify the driver, device, and output port names for a printer. These strings must be ANSI strings when
            the ANSI version of PrintDlg or PrintDlgEx is used, and must be Unicode strings when the Unicode version of <c>PrintDlg</c> or
            <c>PrintDlgEx</c> is used. The <c>PrintDlgEx</c> and <c>PrintDlg</c> functions use these strings to initialize the
            system-defined Print Property Sheet or Print Dialog Box. When the user closes the property sheet or dialog box, information
            about the selected printer is returned in this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.DEVNAMES.wDriverOffset">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The offset, in characters, from the beginning of this structure to a null-terminated string that contains the file name
            (without the extension) of the device driver. On input, this string is used to determine the printer to display initially in
            the dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.DEVNAMES.wDeviceOffset">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The offset, in characters, from the beginning of this structure to the null-terminated string that contains the name of the device.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.DEVNAMES.wOutputOffset">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The offset, in characters, from the beginning of this structure to the null-terminated string that contains the device name
            for the physical output medium (output port).
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.DEVNAMES.wDefault">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            Indicates whether the strings contained in the <c>DEVNAMES</c> structure identify the default printer. This string is used
            to verify that the default printer has not changed since the last print operation. If any of the strings do not match, a
            warning message is displayed informing the user that the document may need to be reformatted. On output, the <c>wDefault</c>
            member is changed only if the <c>Print Setup</c> dialog box was displayed and the user chose the <c>OK</c> button. The
            <c>DN_DEFAULTPRN</c> flag is used if the default printer was selected. If a specific printer is selected, the flag is not
            used. All other flags in this member are reserved for internal use by the dialog box procedure for the <c>Print</c> property
            sheet or <c>Print</c> dialog box.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.FINDREPLACE">
            <summary>
            Contains information that the FindText and ReplaceText functions use to initialize the <c>Find</c> and <c>Replace</c> dialog
            boxes. The FINDMSGSTRING registered message uses this structure to pass the user's search or replacement input to the owner
            window of a <c>Find</c> or <c>Replace</c> dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length, in bytes, of the structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. The window procedure of the specified window receives FINDMSGSTRING
            messages from the dialog box. This member can be any valid window handle, but it must not be <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.hInstance">
            <summary>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the <c>FR_ENABLETEMPLATEHANDLE</c> flag is set in the <c>Flags</c>, <c>hInstance</c> is a handle to a memory object
            containing a dialog box template. If the <c>FR_ENABLETEMPLATE</c> flag is set, <c>hInstance</c> is a handle to a module that
            contains a dialog box template named by the <c>lpTemplateName</c> member. If neither flag is set, this member is ignored.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags that you can use to initialize the dialog box. The dialog box sets these flags when it sends the
            FINDMSGSTRING registered message to indicate the user's input. This member can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>FR_DIALOGTERM 0x00000040</term>
            <term>
            If set in a FINDMSGSTRING message, indicates that the dialog box is closing. When you receive a message with this flag set,
            the dialog box handle returned by the FindText or ReplaceText function is no longer valid.
            </term>
            </item>
            <item>
            <term>FR_DOWN 0x00000001</term>
            <term>
            If set, the Down button of the direction radio buttons in a Find dialog box is selected indicating that you should search
            from the current location to the end of the document. If not set, the Up button is selected so you should search to the
            beginning of the document. You can set this flag to initialize the dialog box. If set in a FINDMSGSTRING message, indicates
            the user's selection.
            </term>
            </item>
            <item>
            <term>FR_ENABLEHOOK 0x00000100</term>
            <term>Enables the hook function specified in the lpfnHook member. This flag is used only to initialize the dialog box.</term>
            </item>
            <item>
            <term>FR_ENABLETEMPLATE 0x00000200</term>
            <term>
            Indicates that the hInstance and lpTemplateName members specify a dialog box template to use in place of the default
            template. This flag is used only to initialize the dialog box.
            </term>
            </item>
            <item>
            <term>FR_ENABLETEMPLATEHANDLE 0x00002000</term>
            <term>
            Indicates that the hInstance member identifies a data block that contains a preloaded dialog box template. The system
            ignores the lpTemplateName member if this flag is specified.
            </term>
            </item>
            <item>
            <term>FR_FINDNEXT 0x00000008</term>
            <term>
            If set in a FINDMSGSTRING message, indicates that the user clicked the Find Next button in a Find or Replace dialog box. The
            lpstrFindWhat member specifies the string to search for.
            </term>
            </item>
            <item>
            <term>FR_HIDEUPDOWN 0x00004000</term>
            <term>If set when initializing a Find dialog box, hides the search direction radio buttons.</term>
            </item>
            <item>
            <term>FR_HIDEMATCHCASE 0x00008000</term>
            <term>If set when initializing a Find or Replace dialog box, hides the Match Case check box.</term>
            </item>
            <item>
            <term>FR_HIDEWHOLEWORD 0x00010000</term>
            <term>If set when initializing a Find or Replace dialog box, hides the Match Whole Word Only check box.</term>
            </item>
            <item>
            <term>FR_MATCHCASE 0x00000004</term>
            <term>
            If set, the Match Case check box is selected indicating that the search should be case-sensitive. If not set, the check box
            is unselected so the search should be case-insensitive. You can set this flag to initialize the dialog box. If set in a
            FINDMSGSTRING message, indicates the user's selection.
            </term>
            </item>
            <item>
            <term>FR_NOMATCHCASE 0x00000800</term>
            <term>If set when initializing a Find or Replace dialog box, disables the Match Case check box.</term>
            </item>
            <item>
            <term>FR_NOUPDOWN 0x00000400</term>
            <term>If set when initializing a Find dialog box, disables the search direction radio buttons.</term>
            </item>
            <item>
            <term>FR_NOWHOLEWORD 0x00001000</term>
            <term>If set when initializing a Find or Replace dialog box, disables the Whole Word check box.</term>
            </item>
            <item>
            <term>FR_REPLACE 0x00000010</term>
            <term>
            If set in a FINDMSGSTRING message, indicates that the user clicked the Replace button in a Replace dialog box. The
            lpstrFindWhat member specifies the string to be replaced and the lpstrReplaceWith member specifies the replacement string.
            </term>
            </item>
            <item>
            <term>FR_REPLACEALL 0x00000020</term>
            <term>
            If set in a FINDMSGSTRING message, indicates that the user clicked the Replace All button in a Replace dialog box. The
            lpstrFindWhat member specifies the string to be replaced and the lpstrReplaceWith member specifies the replacement string.
            </term>
            </item>
            <item>
            <term>FR_SHOWHELP 0x00000080</term>
            <term>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </term>
            </item>
            <item>
            <term>FR_WHOLEWORD 0x00000002</term>
            <term>
            If set, the Match Whole Word Only check box is selected indicating that you should search only for whole words that match
            the search string. If not set, the check box is unselected so you should also search for word fragments that match the
            search string. You can set this flag to initialize the dialog box. If set in a FINDMSGSTRING message, indicates the user's selection.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.lpstrFindWhat">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The search string that the user typed in the <c>Find What</c> edit control. You must dynamically allocate the buffer or use
            a global or static array so it does not go out of scope before the dialog box closes. The buffer should be at least 80
            characters long. If the buffer contains a string when you initialize the dialog box, the string is displayed in the <c>Find
            What</c> edit control. If a FINDMSGSTRING message specifies the <c>FR_FINDNEXT</c> flag, <c>lpstrFindWhat</c> contains the
            string to search for. The <c>FR_DOWN</c>, <c>FR_WHOLEWORD</c>, and <c>FR_MATCHCASE</c> flags indicate the direction and type
            of search. If a <c>FINDMSGSTRING</c> message specifies the <c>FR_REPLACE</c> or <c>FR_REPLACE</c> flags,
            <c>lpstrFindWhat</c> contains the string to be replaced.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.lpstrReplaceWith">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The replacement string that the user typed in the <c>Replace With</c> edit control. You must dynamically allocate the buffer
            or use a global or static array so it does not go out of scope before the dialog box closes. If the buffer contains a string
            when you initialize the dialog box, the string is displayed in the <c>Replace With</c> edit control.
            </para>
            <para>
            If a FINDMSGSTRING message specifies the <c>FR_REPLACE</c> or <c>FR_REPLACEALL</c> flags, <c>lpstrReplaceWith</c> contains
            the replacement string .
            </para>
            <para>The FindText function ignores this member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.wFindWhatLen">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The length, in bytes, of the buffer pointed to by the <c>lpstrFindWhat</c> member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.wReplaceWithLen">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The length, in bytes, of the buffer pointed to by the <c>lpstrReplaceWith</c> member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.lCustData">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>
            Application-defined data that the system passes to the hook procedure identified by the <c>lpfnHook</c> member. When the
            system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the
            <c>FINDREPLACE</c> structure specified when the dialog was created. The hook procedure can use this pointer to get the
            <c>lCustData</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.lpfnHook">
            <summary>
            <para>Type: <c>LPFRHOOKPROC</c></para>
            <para>
            A pointer to an FRHookProc hook procedure that can process messages intended for the dialog box. This member is ignored
            unless the <c>FR_ENABLEHOOK</c> flag is set in the <c>Flags</c> member. If the hook procedure returns <c>FALSE</c> in
            response to the WM_INITDIALOG message, the hook procedure must display the dialog box or else the dialog box will not be
            shown. To do this, first perform any other paint operations, and then call the ShowWindow and UpdateWindow functions.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDREPLACE.lpTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template is
            substituted for the standard dialog box template. For numbered dialog box resources, this can be a value returned by the
            MAKEINTRESOURCE macro. This member is ignored unless the <c>FR_ENABLETEMPLATE</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.OFNOTIFY">
            <summary>
            Contains information about a WM_NOTIFY message sent to an OFNHookProc hook procedure for an <c>Open</c> or <c>Save As</c> dialog
            box. The lParam parameter of the <c>WM_NOTIFY</c> message is a pointer to an <c>OFNOTIFY</c> structure.
            </summary>
            <remarks>
            Not all of the <c>Open</c> and <c>Save As</c> notification messages use the <c>OFNOTIFY</c> structure. The CDN_INCLUDEITEM
            notification message uses the OFNOTIFYEX structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFY.hdr">
            <summary>
            <para>Type: <c>NMHDR</c></para>
            <para>
            The <c>code</c> member of this structure can be one of the following notification messages that identify the message being
            sent: CDN_FILEOK, CDN_FOLDERCHANGE, CDN_HELP, CDN_INITDONE, CDN_SELCHANGE, CDN_SHAREVIOLATION, CDN_TYPECHANGE.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFY.lpOFN">
            <summary>
            <para>Type: <c>LPOPENFILENAME</c></para>
            <para>
            A pointer to the OPENFILENAME structure that was specified when the <c>Open</c> or <c>Save As</c> dialog box was created.
            For some of the notification messages, this structure contains additional information about the event that caused the notification.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFY.pszFile">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The file name for which a network sharing violation has occurred. This member is valid only with the CDN_SHAREVIOLATION
            notification message.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.OFNOTIFYEX">
            <summary>Contains information about a CDN_INCLUDEITEM notification message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFYEX.hdr">
            <summary>
            <para>Type: <c>NMHDR</c></para>
            <para>The <c>code</c> member of this structure identifies the notification message being sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFYEX.lpOFN">
            <summary>
            <para>Type: <c>LPOPENFILENAME</c></para>
            <para>
            A pointer to an OPENFILENAME structure containing the values specified when the <c>Open</c> or <c>Save As</c> dialog box was created.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFYEX.psf">
            <summary>
            <para>Type: <c>LPVOID</c></para>
            <para>A pointer to the interface for the folder or shell name-space extension whose items are being enumerated.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OFNOTIFYEX.pidl">
            <summary>
            <para>Type: <c>LPVOID</c></para>
            <para>
            A pointer to an item identifier list that identifies an item in the container identified by the <c>psf</c> member. The item
            identifier is relative to the <c>psf</c> container.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.OPENFILENAME">
            <summary>
            <para>
            [Starting with Windows Vista, the <c>Open</c> and <c>Save As</c> common dialog boxes have been superseded by the Common Item
            Dialog. We recommended that you use the Common Item Dialog API instead of these dialog boxes from the Common Dialog Box Library.]
            </para>
            <para>
            Contains information that the GetOpenFileName and GetSaveFileName functions use to initialize an <c>Open</c> or <c>Save As</c>
            dialog box. After the user closes the dialog box, the system returns information about the user's selection in this structure.
            </para>
            </summary>
            <remarks>
            For compatibility reasons, the Places Bar is hidden if <c>Flags</c> is set to <c>OFN_ENABLEHOOK</c> and <c>lStructSize</c> is <c>OPENFILENAME_SIZE_VERSION_400</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length, in bytes, of the structure. Use
            <code>sizeof (OPENFILENAME)</code>
            for this parameter.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be <c>NULL</c> if the
            dialog box has no owner.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.hInstance">
            <summary>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the <c>OFN_ENABLETEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hInstance</c> is a handle to a memory
            object containing a dialog box template. If the <c>OFN_ENABLETEMPLATE</c> flag is set, <c>hInstance</c> is a handle to a
            module that contains a dialog box template named by the <c>lpTemplateName</c> member. If neither flag is set, this member is
            ignored. If the <c>OFN_EXPLORER</c> flag is set, the system uses the specified template to create a dialog box that is a
            child of the default Explorer-style dialog box. If the <c>OFN_EXPLORER</c> flag is not set, the system uses the template to
            create an old-style dialog box that replaces the default dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrFilter">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A buffer containing pairs of null-terminated filter strings. The last string in the buffer must be terminated by two
            <c>NULL</c> characters.
            </para>
            <para>
            The first string in each pair is a display string that describes the filter (for example, "Text Files"), and the second
            string specifies the filter pattern (for example, ".TXT"). To specify multiple filter patterns for a single display string,
            use a semicolon to separate the patterns (for example, ".TXT;.DOC;.BAK"). A pattern string can be a combination of valid
            file name characters and the asterisk (*) wildcard character. Do not include spaces in the pattern string.
            </para>
            <para>
            The system does not change the order of the filters. It displays them in the <c>File Types</c> combo box in the order
            specified in <c>lpstrFilter</c>.
            </para>
            <para>If <c>lpstrFilter</c> is <c>NULL</c>, the dialog box does not display any filters.</para>
            <para>
            In the case of a shortcut, if no filter is set, GetOpenFileName and GetSaveFileName retrieve the name of the .lnk file, not
            its target. This behavior is the same as setting the <c>OFN_NODEREFERENCELINKS</c> flag in the <c>Flags</c> member. To
            retrieve a shortcut's target without filtering, use the string
            <code>"All Files\0*.*\0\0"</code>
            .
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrCustomFilter">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            A static buffer that contains a pair of null-terminated filter strings for preserving the filter pattern chosen by the user.
            The first string is your display string that describes the custom filter, and the second string is the filter pattern
            selected by the user. The first time your application creates the dialog box, you specify the first string, which can be any
            nonempty string. When the user selects a file, the dialog box copies the current filter pattern to the second string. The
            preserved filter pattern can be one of the patterns specified in the <c>lpstrFilter</c> buffer, or it can be a filter
            pattern typed by the user. The system uses the strings to initialize the user-defined file filter the next time the dialog
            box is created. If the <c>nFilterIndex</c> member is zero, the dialog box uses the custom filter.
            </para>
            <para>If this member is <c>NULL</c>, the dialog box does not preserve user-defined filter patterns.</para>
            <para>
            If this member is not <c>NULL</c>, the value of the <c>nMaxCustFilter</c> member must specify the size, in characters, of
            the <c>lpstrCustomFilter</c> buffer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.nMaxCustFilter">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The size, in characters, of the buffer identified by <c>lpstrCustomFilter</c>. This buffer should be at least 40 characters
            long. This member is ignored if <c>lpstrCustomFilter</c> is <c>NULL</c> or points to a <c>NULL</c> string.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.nFilterIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The index of the currently selected filter in the <c>File Types</c> control. The buffer pointed to by <c>lpstrFilter</c>
            contains pairs of strings that define the filters. The first pair of strings has an index value of 1, the second pair 2, and
            so on. An index of zero indicates the custom filter specified by <c>lpstrCustomFilter</c>. You can specify an index on input
            to indicate the initial filter description and filter pattern for the dialog box. When the user selects a file,
            <c>nFilterIndex</c> returns the index of the currently displayed filter. If <c>nFilterIndex</c> is zero and
            <c>lpstrCustomFilter</c> is <c>NULL</c>, the system uses the first filter in the <c>lpstrFilter</c> buffer. If all three
            members are zero or <c>NULL</c>, the system does not use any filters and does not show any files in the file list control of
            the dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrFile">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The file name used to initialize the <c>File Name</c> edit control. The first character of this buffer must be <c>NULL</c>
            if initialization is not necessary. When the GetOpenFileName or GetSaveFileName function returns successfully, this buffer
            contains the drive designator, path, file name, and extension of the selected file.
            </para>
            <para>
            If the <c>OFN_ALLOWMULTISELECT</c> flag is set and the user selects multiple files, the buffer contains the current
            directory followed by the file names of the selected files. For Explorer-style dialog boxes, the directory and file name
            strings are <c>NULL</c> separated, with an extra <c>NULL</c> character after the last file name. For old-style dialog boxes,
            the strings are space separated and the function uses short file names for file names with spaces. You can use the
            FindFirstFile function to convert between long and short file names. If the user selects only one file, the <c>lpstrFile</c>
            string does not have a separator between the path and file name.
            </para>
            <para>
            If the buffer is too small, the function returns <c>FALSE</c> and the CommDlgExtendedError function returns
            <c>FNERR_BUFFERTOOSMALL</c>. In this case, the first two bytes of the <c>lpstrFile</c> buffer contain the required size, in
            bytes or characters.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.nMaxFile">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The size, in characters, of the buffer pointed to by <c>lpstrFile</c>. The buffer must be large enough to store the path and
            file name string or strings, including the terminating <c>NULL</c> character. The GetOpenFileName and GetSaveFileName
            functions return <c>FALSE</c> if the buffer is too small to contain the file information. The buffer should be at least 256
            characters long.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrFileTitle">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>The file name and extension (without path information) of the selected file. This member can be <c>NULL</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.nMaxFileTitle">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The size, in characters, of the buffer pointed to by <c>lpstrFileTitle</c>. This member is ignored if <c>lpstrFileTitle</c>
            is <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrInitialDir">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>The initial directory. The algorithm for selecting the initial directory varies on different platforms.</para>
            <para><c>Windows 7:</c></para>
            <list type="number">
            <item>
            <term>
            If <c>lpstrInitialDir</c> has the same value as was passed the first time the application used an <c>Open</c> or <c>Save
            As</c> dialog box, the path most recently selected by the user is used as the initial directory.
            </term>
            </item>
            <item>
            <term>Otherwise, if <c>lpstrFile</c> contains a path, that path is the initial directory.</term>
            </item>
            <item>
            <term>Otherwise, if <c>lpstrInitialDir</c> is not <c>NULL</c>, it specifies the initial directory.</term>
            </item>
            <item>
            <term>
            If <c>lpstrInitialDir</c> is <c>NULL</c> and the current directory contains any files of the specified filter types, the
            initial directory is the current directory.
            </term>
            </item>
            <item>
            <term>Otherwise, the initial directory is the personal files directory of the current user.</term>
            </item>
            <item>
            <term>Otherwise, the initial directory is the Desktop folder.</term>
            </item>
            </list>
            <para>Windows 2000/XP/Vista:</para>
            <list type="number">
            <item>
            <term>If <c>lpstrFile</c> contains a path, that path is the initial directory.</term>
            </item>
            <item>
            <term>Otherwise, <c>lpstrInitialDir</c> specifies the initial directory.</term>
            </item>
            <item>
            <term>
            Otherwise, if the application has used an <c>Open</c> or <c>Save As</c> dialog box in the past, the path most recently used
            is selected as the initial directory. However, if an application is not run for a long time, its saved selected path is discarded.
            </term>
            </item>
            <item>
            <term>
            If <c>lpstrInitialDir</c> is <c>NULL</c> and the current directory contains any files of the specified filter types, the
            initial directory is the current directory.
            </term>
            </item>
            <item>
            <term>Otherwise, the initial directory is the personal files directory of the current user.</term>
            </item>
            <item>
            <term>Otherwise, the initial directory is the Desktop folder.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrTitle">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A string to be placed in the title bar of the dialog box. If this member is <c>NULL</c>, the system uses the default title
            (that is, <c>Save As</c> or <c>Open</c>).
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags you can use to initialize the dialog box. When the dialog box returns, it sets these flags to indicate
            the user's input. This member can be a combination of the following flags.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OFN_ALLOWMULTISELECT 0x00000200</term>
            <term>
            The File Name list box allows multiple selections. If you also set the OFN_EXPLORER flag, the dialog box uses the
            Explorer-style user interface; otherwise, it uses the old-style user interface. If the user selects more than one file, the
            lpstrFile buffer returns the path to the current directory followed by the file names of the selected files. The nFileOffset
            member is the offset, in bytes or characters, to the first file name, and the nFileExtension member is not used. For
            Explorer-style dialog boxes, the directory and file name strings are NULL separated, with an extra NULL character after the
            last file name. This format enables the Explorer-style dialog boxes to return long file names that include spaces. For
            old-style dialog boxes, the directory and file name strings are separated by spaces and the function uses short file names
            for file names with spaces. You can use the FindFirstFile function to convert between long and short file names. If you
            specify a custom template for an old-style dialog box, the definition of the File Name list box must contain the
            LBS_EXTENDEDSEL value.
            </term>
            </item>
            <item>
            <term>OFN_CREATEPROMPT 0x00002000</term>
            <term>
            If the user specifies a file that does not exist, this flag causes the dialog box to prompt the user for permission to
            create the file. If the user chooses to create the file, the dialog box closes and the function returns the specified name;
            otherwise, the dialog box remains open. If you use this flag with the OFN_ALLOWMULTISELECT flag, the dialog box allows the
            user to specify only one nonexistent file.
            </term>
            </item>
            <item>
            <term>OFN_DONTADDTORECENT 0x02000000</term>
            <term>
            Prevents the system from adding a link to the selected file in the file system directory that contains the user's most
            recently used documents. To retrieve the location of this directory, call the SHGetSpecialFolderLocation function with the
            CSIDL_RECENT flag.
            </term>
            </item>
            <item>
            <term>OFN_ENABLEHOOK 0x00000020</term>
            <term>Enables the hook function specified in the lpfnHook member.</term>
            </item>
            <item>
            <term>OFN_ENABLEINCLUDENOTIFY 0x00400000</term>
            <term>
            Causes the dialog box to send CDN_INCLUDEITEM notification messages to your OFNHookProc hook procedure when the user opens a
            folder. The dialog box sends a notification for each item in the newly opened folder. These messages enable you to control
            which items the dialog box displays in the folder's item list.
            </term>
            </item>
            <item>
            <term>OFN_ENABLESIZING 0x00800000</term>
            <term>
            Enables the Explorer-style dialog box to be resized using either the mouse or the keyboard. By default, the Explorer-style
            Open and Save As dialog boxes allow the dialog box to be resized regardless of whether this flag is set. This flag is
            necessary only if you provide a hook procedure or custom template. The old-style dialog box does not permit resizing.
            </term>
            </item>
            <item>
            <term>OFN_ENABLETEMPLATE 0x00000040</term>
            <term>
            The lpTemplateName member is a pointer to the name of a dialog template resource in the module identified by the hInstance
            member. If the OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box that is a child of
            the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an
            old-style dialog box that replaces the default dialog box.
            </term>
            </item>
            <item>
            <term>OFN_ENABLETEMPLATEHANDLE 0x00000080</term>
            <term>
            The hInstance member identifies a data block that contains a preloaded dialog box template. The system ignores
            lpTemplateName if this flag is specified. If the OFN_EXPLORER flag is set, the system uses the specified template to create
            a dialog box that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses
            the template to create an old-style dialog box that replaces the default dialog box.
            </term>
            </item>
            <item>
            <term>OFN_EXPLORER 0x00080000</term>
            <term>
            Indicates that any customizations made to the Open or Save As dialog box use the Explorer-style customization methods. For
            more information, see Explorer-Style Hook Procedures and Explorer-Style Custom Templates. By default, the Open and Save As
            dialog boxes use the Explorer-style user interface regardless of whether this flag is set. This flag is necessary only if
            you provide a hook procedure or custom template, or set the OFN_ALLOWMULTISELECT flag. If you want the old-style user
            interface, omit the OFN_EXPLORER flag and provide a replacement old-style template or hook procedure. If you want the old
            style but do not need a custom template or hook procedure, simply provide a hook procedure that always returns FALSE.
            </term>
            </item>
            <item>
            <term>OFN_EXTENSIONDIFFERENT 0x00000400</term>
            <term>
            The user typed a file name extension that differs from the extension specified by lpstrDefExt. The function does not use
            this flag if lpstrDefExt is NULL.
            </term>
            </item>
            <item>
            <term>OFN_FILEMUSTEXIST 0x00001000</term>
            <term>
            The user can type only names of existing files in the File Name entry field. If this flag is specified and the user enters
            an invalid name, the dialog box procedure displays a warning in a message box. If this flag is specified, the
            OFN_PATHMUSTEXIST flag is also used. This flag can be used in an Open dialog box. It cannot be used with a Save As dialog box.
            </term>
            </item>
            <item>
            <term>OFN_FORCESHOWHIDDEN 0x10000000</term>
            <term>
            Forces the showing of system and hidden files, thus overriding the user setting to show or not show hidden files. However, a
            file that is marked both system and hidden is not shown.
            </term>
            </item>
            <item>
            <term>OFN_HIDEREADONLY 0x00000004</term>
            <term>Hides the Read Only check box.</term>
            </item>
            <item>
            <term>OFN_LONGNAMES 0x00200000</term>
            <term>
            For old-style dialog boxes, this flag causes the dialog box to use long file names. If this flag is not specified, or if the
            OFN_ALLOWMULTISELECT flag is also set, old-style dialog boxes use short file names (8.3 format) for file names with spaces.
            Explorer-style dialog boxes ignore this flag and always display long file names.
            </term>
            </item>
            <item>
            <term>OFN_NOCHANGEDIR 0x00000008</term>
            <term>
            Restores the current directory to its original value if the user changed the directory while searching for files. This flag
            is ineffective for GetOpenFileName.
            </term>
            </item>
            <item>
            <term>OFN_NODEREFERENCELINKS 0x00100000</term>
            <term>
            Directs the dialog box to return the path and file name of the selected shortcut (.LNK) file. If this value is not
            specified, the dialog box returns the path and file name of the file referenced by the shortcut.
            </term>
            </item>
            <item>
            <term>OFN_NOLONGNAMES 0x00040000</term>
            <term>
            For old-style dialog boxes, this flag causes the dialog box to use short file names (8.3 format). Explorer-style dialog
            boxes ignore this flag and always display long file names.
            </term>
            </item>
            <item>
            <term>OFN_NONETWORKBUTTON 0x00020000</term>
            <term>Hides and disables the Network button.</term>
            </item>
            <item>
            <term>OFN_NOREADONLYRETURN 0x00008000</term>
            <term>The returned file does not have the Read Only check box selected and is not in a write-protected directory.</term>
            </item>
            <item>
            <term>OFN_NOTESTFILECREATE 0x00010000</term>
            <term>
            The file is not created before the dialog box is closed. This flag should be specified if the application saves the file on
            a create-nonmodify network share. When an application specifies this flag, the library does not check for write protection,
            a full disk, an open drive door, or network protection. Applications using this flag must perform file operations carefully,
            because a file cannot be reopened once it is closed.
            </term>
            </item>
            <item>
            <term>OFN_NOVALIDATE 0x00000100</term>
            <term>
            The common dialog boxes allow invalid characters in the returned file name. Typically, the calling application uses a hook
            procedure that checks the file name by using the FILEOKSTRING message. If the text box in the edit control is empty or
            contains nothing but spaces, the lists of files and directories are updated. If the text box in the edit control contains
            anything else, nFileOffset and nFileExtension are set to values generated by parsing the text. No default extension is added
            to the text, nor is text copied to the buffer specified by lpstrFileTitle. If the value specified by nFileOffset is less
            than zero, the file name is invalid. Otherwise, the file name is valid, and nFileExtension and nFileOffset can be used as if
            the OFN_NOVALIDATE flag had not been specified.
            </term>
            </item>
            <item>
            <term>OFN_OVERWRITEPROMPT 0x00000002</term>
            <term>
            Causes the Save As dialog box to generate a message box if the selected file already exists. The user must confirm whether
            to overwrite the file.
            </term>
            </item>
            <item>
            <term>OFN_PATHMUSTEXIST 0x00000800</term>
            <term>
            The user can type only valid paths and file names. If this flag is used and the user types an invalid path and file name in
            the File Name entry field, the dialog box function displays a warning in a message box.
            </term>
            </item>
            <item>
            <term>OFN_READONLY 0x00000001</term>
            <term>
            Causes the Read Only check box to be selected initially when the dialog box is created. This flag indicates the state of the
            Read Only check box when the dialog box is closed.
            </term>
            </item>
            <item>
            <term>OFN_SHAREAWARE 0x00004000</term>
            <term>
            Specifies that if a call to the OpenFile function fails because of a network sharing violation, the error is ignored and the
            dialog box returns the selected file name. If this flag is not set, the dialog box notifies your hook procedure when a
            network sharing violation occurs for the file name specified by the user. If you set the OFN_EXPLORER flag, the dialog box
            sends the CDN_SHAREVIOLATION message to the hook procedure. If you do not set OFN_EXPLORER, the dialog box sends the
            SHAREVISTRING registered message to the hook procedure.
            </term>
            </item>
            <item>
            <term>OFN_SHOWHELP 0x00000010</term>
            <term>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button. An Explorer-style dialog box sends a
            CDN_HELP notification message to your hook procedure when the user clicks the Help button.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.nFileOffset">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The zero-based offset, in characters, from the beginning of the path to the file name in the string pointed to by
            <c>lpstrFile</c>. For the ANSI version, this is the number of bytes; for the Unicode version, this is the number of
            characters. For example, if <c>lpstrFile</c> points to the following string, "c:\dir1\dir2\file.ext", this member contains
            the value 13 to indicate the offset of the "file.ext" string. If the user selects more than one file, <c>nFileOffset</c> is
            the offset to the first file name.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.nFileExtension">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The zero-based offset, in characters, from the beginning of the path to the file name extension in the string pointed to by
            <c>lpstrFile</c>. For the ANSI version, this is the number of bytes; for the Unicode version, this is the number of
            characters. Usually the file name extension is the substring which follows the last occurrence of the dot (".") character.
            For example, txt is the extension of the filename readme.txt, html the extension of readme.txt.html. Therefore, if
            <c>lpstrFile</c> points to the string "c:\dir1\dir2\readme.txt", this member contains the value 20. If <c>lpstrFile</c>
            points to the string "c:\dir1\dir2\readme.txt.html", this member contains the value 24. If <c>lpstrFile</c> points to the
            string "c:\dir1\dir2\readme.txt.html.", this member contains the value 29. If <c>lpstrFile</c> points to a string that does
            not contain any "." character such as "c:\dir1\dir2\readme", this member contains zero.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpstrDefExt">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The default extension. GetOpenFileName and GetSaveFileName append this extension to the file name if the user fails to type
            an extension. This string can be any length, but only the first three characters are appended. The string should not contain
            a period (.). If this member is <c>NULL</c> and the user fails to type an extension, no extension is appended.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lCustData">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>
            Application-defined data that the system passes to the hook procedure identified by the <c>lpfnHook</c> member. When the
            system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the
            <c>OPENFILENAME</c> structure specified when the dialog box was created. The hook procedure can use this pointer to get the
            <c>lCustData</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpfnHook">
            <summary>
            <para>Type: <c>LPOFNHOOKPROC</c></para>
            <para>
            A pointer to a hook procedure. This member is ignored unless the <c>Flags</c> member includes the <c>OFN_ENABLEHOOK</c> flag.
            </para>
            <para>
            If the <c>OFN_EXPLORER</c> flag is not set in the <c>Flags</c> member, <c>lpfnHook</c> is a pointer to an
            OFNHookProcOldStyle hook procedure that receives messages intended for the dialog box. The hook procedure returns
            <c>FALSE</c> to pass a message to the default dialog box procedure or <c>TRUE</c> to discard the message.
            </para>
            <para>
            If <c>OFN_EXPLORER</c> is set, <c>lpfnHook</c> is a pointer to an OFNHookProc hook procedure. The hook procedure receives
            notification messages sent from the dialog box. The hook procedure also receives messages for any additional controls that
            you defined by specifying a child dialog template. The hook procedure does not receive messages intended for the standard
            controls of the default dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.lpTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog template resource in the module identified by the <c>hInstance</c> member. For numbered dialog box
            resources, this can be a value returned by the MAKEINTRESOURCE macro. This member is ignored unless the
            <c>OFN_ENABLETEMPLATE</c> flag is set in the <c>Flags</c> member. If the <c>OFN_EXPLORER</c> flag is set, the system uses
            the specified template to create a dialog box that is a child of the default Explorer-style dialog box. If the
            <c>OFN_EXPLORER</c> flag is not set, the system uses the template to create an old-style dialog box that replaces the
            default dialog box.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.pvReserved">
            <summary>
            <para>Type: <c>void*</c></para>
            <para>This member is reserved.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.dwReserved">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>This member is reserved.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.OPENFILENAME.FlagsEx">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>A set of bit flags you can use to initialize the dialog box. Currently, this member can be zero or the following flag.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OFN_EX_NOPLACESBAR 0x00000001</term>
            <term>
            If this flag is set, the places bar is not displayed. If this flag is not set, Explorer-style dialog boxes include a places
            bar containing icons for commonly-used folders, such as Favorites and Desktop.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PAGESETUPDLG">
            <summary>
            Contains information the PageSetupDlg function uses to initialize the <c>Page Setup</c> dialog box. After the user closes the
            dialog box, the system returns information about the user-defined page parameters in this structure.
            </summary>
            <remarks>
            <para>
            If the <c>PSD_INHUNDREDTHSOFMILLIMETERS</c> and <c>PSD_INTHOUSANDTHSOFINCHES</c> flags are not specified, the system queries the
            <c>LOCALE_IMEASURE</c> value of the default user locale to determine the unit of measure (either hundredths of millimeters or
            thousandths of inches) for the margin widths and paper size.
            </para>
            <para>
            If both <c>hDevNames</c> and <c>hDevMode</c> have valid handles and the printer name specified by the <c>wDeviceOffset</c>
            member of the DEVNAMES structure is not the same as the name specified by the <c>dmDeviceName</c> member of the DEVMODE
            structure, the system uses the name specified by <c>wDeviceOffset</c> by default.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size, in bytes, of this structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be <c>NULL</c> if the
            dialog box has no owner.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.hDevMode">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            A handle to a global memory object that contains a DEVMODE structure. On input, if a handle is specified, the values in the
            corresponding <c>DEVMODE</c> structure are used to initialize the controls in the dialog box. On output, the dialog box sets
            <c>hDevMode</c> to a global memory handle to a <c>DEVMODE</c> structure that contains values specifying the user's
            selections. If the user's selections are not available, the dialog box sets <c>hDevMode</c> to <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.hDevNames">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            A handle to a global memory object that contains a DEVNAMES structure. This structure contains three strings that specify
            the driver name, the printer name, and the output port name. On input, if a handle is specified, the strings in the
            corresponding <c>DEVNAMES</c> structure are used to initialize controls in the dialog box. On output, the dialog box sets
            <c>hDevNames</c> to a global memory handle to a <c>DEVNAMES</c> structure that contains strings specifying the user's
            selections. If the user's selections are not available, the dialog box sets <c>hDevNames</c> to <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags that you can use to initialize the <c>Page Setup</c> dialog box. When the dialog box returns, it sets
            these flags to indicate the user's input. This member can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PSD_DEFAULTMINMARGINS 0x00000000</term>
            <term>
            Sets the minimum values that the user can specify for the page margins to be the minimum margins allowed by the printer.
            This is the default. This flag is ignored if the PSD_MARGINS and PSD_MINMARGINS flags are also specified.
            </term>
            </item>
            <item>
            <term>PSD_DISABLEMARGINS 0x00000010</term>
            <term>Disables the margin controls, preventing the user from setting the margins.</term>
            </item>
            <item>
            <term>PSD_DISABLEORIENTATION 0x00000100</term>
            <term>Disables the orientation controls, preventing the user from setting the page orientation.</term>
            </item>
            <item>
            <term>PSD_DISABLEPAGEPAINTING 0x00080000</term>
            <term>
            Prevents the dialog box from drawing the contents of the sample page. If you enable a PagePaintHook hook procedure, you can
            still draw the contents of the sample page.
            </term>
            </item>
            <item>
            <term>PSD_DISABLEPAPER 0x00000200</term>
            <term>Disables the paper controls, preventing the user from setting page parameters such as the paper size and source.</term>
            </item>
            <item>
            <term>PSD_DISABLEPRINTER 0x00000020</term>
            <term>
            Obsolete. Windows XP/2000: Disables the Printer button, preventing the user from invoking a dialog box that contains
            additional printer setup information.
            </term>
            </item>
            <item>
            <term>PSD_ENABLEPAGEPAINTHOOK 0x00040000</term>
            <term>Enables the hook procedure specified in the lpfnPagePaintHook member.</term>
            </item>
            <item>
            <term>PSD_ENABLEPAGESETUPHOOK 0x00002000</term>
            <term>Enables the hook procedure specified in the lpfnPageSetupHook member.</term>
            </item>
            <item>
            <term>PSD_ENABLEPAGESETUPTEMPLATE 0x00008000</term>
            <term>
            Indicates that the hInstance and lpPageSetupTemplateName members specify a dialog box template to use in place of the
            default template.
            </term>
            </item>
            <item>
            <term>PSD_ENABLEPAGESETUPTEMPLATEHANDLE 0x00020000</term>
            <term>
            Indicates that the hPageSetupTemplate member identifies a data block that contains a preloaded dialog box template. The
            system ignores the lpPageSetupTemplateName member if this flag is specified.
            </term>
            </item>
            <item>
            <term>PSD_INHUNDREDTHSOFMILLIMETERS 0x00000008</term>
            <term>
            Indicates that hundredths of millimeters are the unit of measurement for margins and paper size. The values in the rtMargin,
            rtMinMargin, and ptPaperSize members are in hundredths of millimeters. You can set this flag on input to override the
            default unit of measurement for the user's locale. When the function returns, the dialog box sets this flag to indicate the
            units used.
            </term>
            </item>
            <item>
            <term>PSD_INTHOUSANDTHSOFINCHES 0x00000004</term>
            <term>
            Indicates that thousandths of inches are the unit of measurement for margins and paper size. The values in the rtMargin,
            rtMinMargin, and ptPaperSize members are in thousandths of inches. You can set this flag on input to override the default
            unit of measurement for the user's locale. When the function returns, the dialog box sets this flag to indicate the units used.
            </term>
            </item>
            <item>
            <term>PSD_INWININIINTLMEASURE 0x00000000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>PSD_MARGINS 0x00000002</term>
            <term>
            Causes the system to use the values specified in the rtMargin member as the initial widths for the left, top, right, and
            bottom margins. If PSD_MARGINS is not set, the system sets the initial widths to one inch for all margins.
            </term>
            </item>
            <item>
            <term>PSD_MINMARGINS 0x00000001</term>
            <term>
            Causes the system to use the values specified in the rtMinMargin member as the minimum allowable widths for the left, top,
            right, and bottom margins. The system prevents the user from entering a width that is less than the specified minimum. If
            PSD_MINMARGINS is not specified, the system sets the minimum allowable widths to those allowed by the printer.
            </term>
            </item>
            <item>
            <term>PSD_NONETWORKBUTTON 0x00200000</term>
            <term>Hides and disables the Network button.</term>
            </item>
            <item>
            <term>PSD_NOWARNING 0x00000080</term>
            <term>Prevents the system from displaying a warning message when there is no default printer.</term>
            </item>
            <item>
            <term>PSD_RETURNDEFAULT 0x00000400</term>
            <term>
            PageSetupDlg does not display the dialog box. Instead, it sets the hDevNames and hDevMode members to handles to DEVMODE and
            DEVNAMES structures that are initialized for the system default printer. PageSetupDlg returns an error if either hDevNames
            or hDevMode is not NULL.
            </term>
            </item>
            <item>
            <term>PSD_SHOWHELP 0x00000800</term>
            <term>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.ptPaperSize">
            <summary>
            <para>Type: <c>POINT</c></para>
            <para>
            The dimensions of the paper selected by the user. The <c>PSD_INTHOUSANDTHSOFINCHES</c> or
            <c>PSD_INHUNDREDTHSOFMILLIMETERS</c> flag indicates the units of measurement.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.rtMinMargin">
            <summary>
            <para>Type: <c>RECT</c></para>
            <para>
            The minimum allowable widths for the left, top, right, and bottom margins. The system ignores this member if the
            <c>PSD_MINMARGINS</c> flag is not set. These values must be less than or equal to the values specified in the
            <c>rtMargin</c> member. The <c>PSD_INTHOUSANDTHSOFINCHES</c> or <c>PSD_INHUNDREDTHSOFMILLIMETERS</c> flag indicates the
            units of measurement.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.rtMargin">
            <summary>
            <para>Type: <c>RECT</c></para>
            <para>
            The widths of the left, top, right, and bottom margins. If you set the <c>PSD_MARGINS</c> flag, <c>rtMargin</c> specifies
            the initial margin values. When PageSetupDlg returns, <c>rtMargin</c> contains the margin widths selected by the user. The
            <c>PSD_INHUNDREDTHSOFMILLIMETERS</c> or <c>PSD_INTHOUSANDTHSOFINCHES</c> flag indicates the units of measurement.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.hInstance">
            <summary>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the <c>PSD_ENABLEPAGESETUPTEMPLATE</c> flag is set in the <c>Flags</c> member, <c>hInstance</c> is a handle to the
            application or module instance that contains the dialog box template named by the <c>lpPageSetupTemplateName</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.lCustData">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>
            Application-defined data that the system passes to the hook procedure identified by the <c>lpfnPageSetupHook</c> member.
            When the system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the
            <c>PAGESETUPDLG</c> structure specified when the dialog was created. The hook procedure can use this pointer to get the
            <c>lCustData</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.lpfnPageSetupHook">
            <summary>
            <para>Type: <c>LPPAGESETUPHOOK</c></para>
            <para>
            A pointer to a PageSetupHook hook procedure that can process messages intended for the dialog box. This member is ignored
            unless the <c>PSD_ENABLEPAGESETUPHOOK</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.lpfnPagePaintHook">
            <summary>
            <para>Type: <c>LPPAGEPAINTHOOK</c></para>
            <para>
            A pointer to a PagePaintHook hook procedure that receives <c>WM_PSD_*</c> messages from the dialog box whenever the sample
            page is redrawn. By processing the messages, the hook procedure can customize the appearance of the sample page. This member
            is ignored unless the <c>PSD_ENABLEPAGEPAINTHOOK</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.lpPageSetupTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template is
            substituted for the standard dialog box template. For numbered dialog box resources, <c>lpPageSetupTemplateName</c> can be a
            value returned by the MAKEINTRESOURCE macro. This member is ignored unless the <c>PSD_ENABLEPAGESETUPTEMPLATE</c> flag is
            set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PAGESETUPDLG.hPageSetupTemplate">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            If the <c>PSD_ENABLEPAGESETUPTEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hPageSetupTemplate</c> is a
            handle to a memory object containing a dialog box template.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PRINTDLG">
            <summary>
            Contains information that the PrintDlg function uses to initialize the Print Dialog Box. After the user closes the dialog box,
            the system uses this structure to return information about the user's selections.
            </summary>
            <remarks>
            <para>
            If both <c>hDevMode</c> and <c>hDevNames</c> are <c>NULL</c>, PrintDlg initializes the dialog box using the current default
            printer. To initialize the dialog box for a different printer, use the <c>wDeviceOffset</c> member of the DEVNAMES structure to
            specify the name of the printer.
            </para>
            <para>
            Note that the <c>dmDeviceName</c> member of the DEVMODE structure also specifies a printer name. However, <c>dmDeviceName</c> is
            limited to 32 characters, and the <c>wDeviceOffset</c> name is not. If the <c>wDeviceOffset</c> and <c>dmDeviceName</c> names
            are not the same, PrintDlg initializes the dialog box using the printer specified by <c>wDeviceOffset</c>.
            </para>
            <para>
            If the <c>PD_RETURNDEFAULT</c> flag is set and both <c>hDevMode</c> and <c>hDevNames</c> are <c>NULL</c>, PrintDlg uses the
            <c>hDevNames</c> and <c>hDevMode</c> members to return information about the current default printer without displaying the
            dialog box.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The structure size, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be <c>NULL</c> if the
            dialog box has no owner.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hDevMode">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            A handle to a movable global memory object that contains a DEVMODE structure. If <c>hDevMode</c> is not <c>NULL</c> on
            input, you must allocate a movable block of memory for the <c>DEVMODE</c> structure and initialize its members. The PrintDlg
            function uses the input data to initialize the controls in the dialog box. When <c>PrintDlg</c> returns, the <c>DEVMODE</c>
            members indicate the user's input.
            </para>
            <para>
            If <c>hDevMode</c> is <c>NULL</c> on input, PrintDlg allocates memory for the DEVMODE structure, initializes its members to
            indicate the user's input, and returns a handle that identifies it.
            </para>
            <para>
            If the device driver for the specified printer does not support extended device modes, <c>hDevMode</c> is <c>NULL</c> when
            PrintDlg returns.
            </para>
            <para>
            If the device name (specified by the <c>dmDeviceName</c> member of the DEVMODE structure) does not appear in the [devices]
            section of WIN.INI, PrintDlg returns an error.
            </para>
            <para>
            For more information about the <c>hDevMode</c> and <c>hDevNames</c> members, see the Remarks section at the end of this topic.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hDevNames">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            A handle to a movable global memory object that contains a DEVNAMES structure. If <c>hDevNames</c> is not <c>NULL</c> on
            input, you must allocate a movable block of memory for the <c>DEVNAMES</c> structure and initialize its members. The
            PrintDlg function uses the input data to initialize the controls in the dialog box. When <c>PrintDlg</c> returns, the
            <c>DEVNAMES</c> members contain information for the printer chosen by the user. You can use this information to create a
            device context or an information context.
            </para>
            <para>
            The <c>hDevNames</c> member can be <c>NULL</c>, in which case, PrintDlg allocates memory for the DEVNAMES structure,
            initializes its members to indicate the user's input, and returns a handle that identifies it.
            </para>
            <para>
            For more information about the <c>hDevMode</c> and <c>hDevNames</c> members, see the Remarks section at the end of this topic.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hDC">
            <summary>
            <para>Type: <c>HDC</c></para>
            <para>
            A handle to a device context or an information context, depending on whether the <c>Flags</c> member specifies the
            <c>PD_RETURNDC</c> or <c>PC_RETURNIC</c> flag. If neither flag is specified, the value of this member is undefined. If both
            flags are specified, <c>PD_RETURNDC</c> has priority.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            Initializes the <c>Print</c> dialog box. When the dialog box returns, it sets these flags to indicate the user's input. This
            member can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PD_ALLPAGES 0x00000000</term>
            <term>
            The default flag that indicates that the All radio button is initially selected. This flag is used as a placeholder to
            indicate that the PD_PAGENUMS and PD_SELECTION flags are not specified.
            </term>
            </item>
            <item>
            <term>PD_COLLATE 0x00000010</term>
            <term>
            If this flag is set, the Collate check box is selected. If this flag is set when the PrintDlg function returns, the
            application must simulate collation of multiple copies. For more information, see the description of the
            PD_USEDEVMODECOPIESANDCOLLATE flag. See PD_NOPAGENUMS.
            </term>
            </item>
            <item>
            <term>PD_DISABLEPRINTTOFILE 0x00080000</term>
            <term>Disables the Print to File check box.</term>
            </item>
            <item>
            <term>PD_ENABLEPRINTHOOK 0x00001000</term>
            <term>
            Enables the hook procedure specified in the lpfnPrintHook member. This enables the hook procedure for the Print dialog box.
            </term>
            </item>
            <item>
            <term>PD_ENABLEPRINTTEMPLATE 0x00004000</term>
            <term>
            Indicates that the hInstance and lpPrintTemplateName members specify a replacement for the default Print dialog box template.
            </term>
            </item>
            <item>
            <term>PD_ENABLEPRINTTEMPLATEHANDLE 0x00010000</term>
            <term>
            Indicates that the hPrintTemplate member identifies a data block that contains a preloaded dialog box template. This
            template replaces the default template for the Print dialog box. The system ignores the lpPrintTemplateName member if this
            flag is specified.
            </term>
            </item>
            <item>
            <term>PD_ENABLESETUPHOOK 0x00002000</term>
            <term>
            Enables the hook procedure specified in the lpfnSetupHook member. This enables the hook procedure for the Print Setup dialog box.
            </term>
            </item>
            <item>
            <term>PD_ENABLESETUPTEMPLATE 0x00008000</term>
            <term>
            Indicates that the hInstance and lpSetupTemplateName members specify a replacement for the default Print Setup dialog box template.
            </term>
            </item>
            <item>
            <term>PD_ENABLESETUPTEMPLATEHANDLE 0x00020000</term>
            <term>
            Indicates that the hSetupTemplate member identifies a data block that contains a preloaded dialog box template. This
            template replaces the default template for the Print Setup dialog box. The system ignores the lpSetupTemplateName member if
            this flag is specified.
            </term>
            </item>
            <item>
            <term>PD_HIDEPRINTTOFILE 0x00100000</term>
            <term>Hides the Print to File check box.</term>
            </item>
            <item>
            <term>PD_NONETWORKBUTTON 0x00200000</term>
            <term>Hides and disables the Network button.</term>
            </item>
            <item>
            <term>PD_NOPAGENUMS 0x00000008</term>
            <term>
            Disables the Pages radio button and the associated edit controls. Also, it causes the Collate check box to appear in the dialog.
            </term>
            </item>
            <item>
            <term>PD_NOSELECTION 0x00000004</term>
            <term>Disables the Selection radio button.</term>
            </item>
            <item>
            <term>PD_NOWARNING 0x00000080</term>
            <term>Prevents the warning message from being displayed when there is no default printer.</term>
            </item>
            <item>
            <term>PD_PAGENUMS 0x00000002</term>
            <term>
            If this flag is set, the Pages radio button is selected. If this flag is set when the PrintDlg function returns, the
            nFromPage and nToPage members indicate the starting and ending pages specified by the user.
            </term>
            </item>
            <item>
            <term>PD_PRINTSETUP 0x00000040</term>
            <term>Causes the system to display the Print Setup dialog box rather than the Print dialog box.</term>
            </item>
            <item>
            <term>PD_PRINTTOFILE 0x00000020</term>
            <term>
            If this flag is set, the Print to File check box is selected. If this flag is set when the PrintDlg function returns, the
            offset indicated by the wOutputOffset member of the DEVNAMES structure contains the string "FILE:". When you call the
            StartDoc function to start the printing operation, specify this "FILE:" string in the lpszOutput member of the DOCINFO
            structure. Specifying this string causes the print subsystem to query the user for the name of the output file.
            </term>
            </item>
            <item>
            <term>PD_RETURNDC 0x00000100</term>
            <term>
            Causes PrintDlg to return a device context matching the selections the user made in the dialog box. The device context is
            returned in hDC.
            </term>
            </item>
            <item>
            <term>PD_RETURNDEFAULT 0x00000400</term>
            <term>
            If this flag is set, the PrintDlg function does not display the dialog box. Instead, it sets the hDevNames and hDevMode
            members to handles to DEVMODE and DEVNAMES structures that are initialized for the system default printer. Both hDevNames
            and hDevMode must be NULL, or PrintDlg returns an error.
            </term>
            </item>
            <item>
            <term>PD_RETURNIC 0x00000200</term>
            <term>
            Similar to the PD_RETURNDC flag, except this flag returns an information context rather than a device context. If neither
            PD_RETURNDC nor PD_RETURNIC is specified, hDC is undefined on output.
            </term>
            </item>
            <item>
            <term>PD_SELECTION 0x00000001</term>
            <term>
            If this flag is set, the Selection radio button is selected. If neither PD_PAGENUMS nor PD_SELECTION is set, the All radio
            button is selected.
            </term>
            </item>
            <item>
            <term>PD_SHOWHELP 0x00000800</term>
            <term>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING
            registered messages that the dialog box sends when the user clicks the Help button.
            </term>
            </item>
            <item>
            <term>PD_USEDEVMODECOPIES 0x00040000</term>
            <term>Same as PD_USEDEVMODECOPIESANDCOLLATE.</term>
            </item>
            <item>
            <term>PD_USEDEVMODECOPIESANDCOLLATE 0x00040000</term>
            <term>
            This flag indicates whether your application supports multiple copies and collation. Set this flag on input to indicate that
            your application does not support multiple copies and collation. In this case, the nCopies member of the PRINTDLG structure
            always returns 1, and PD_COLLATE is never set in the Flags member. If this flag is not set, the application is responsible
            for printing and collating multiple copies. In this case, the nCopies member of the PRINTDLG structure indicates the number
            of copies the user wants to print, and the PD_COLLATE flag in the Flags member indicates whether the user wants collation.
            Regardless of whether this flag is set, an application can determine from nCopies and PD_COLLATE how many copies to render
            and whether to print them collated. If this flag is set and the printer driver does not support multiple copies, the Copies
            edit control is disabled. Similarly, if this flag is set and the printer driver does not support collation, the Collate
            check box is disabled. The dmCopies and dmCollate members of the DEVMODE structure contain the copies and collate
            information used by the printer driver. If this flag is set and the printer driver supports multiple copies, the dmCopies
            member indicates the number of copies requested by the user. If this flag is set and the printer driver supports collation,
            the dmCollate member of the DEVMODE structure indicates whether the user wants collation. If this flag is not set, the
            dmCopies member always returns 1, and the dmCollate member is always zero. Known issue on Windows 2000/XP/2003: If this flag
            is not set before calling PrintDlg, PrintDlg might swap nCopies and dmCopies values when it returns. The workaround for this
            issue is use dmCopies if its value is larger than 1, else, use nCopies, for you to to get the actual number of copies to be
            printed when PrintDlg returns.
            </term>
            </item>
            </list>
            <para>
            To ensure that PrintDlg or PrintDlgEx returns the correct values in the <c>dmCopies</c> and <c>dmCollate</c> members of the
            DEVMODE structure, set <c>PD_RETURNDC</c> = <c>TRUE</c> and <c>PD_USEDEVMODECOPIESANDCOLLATE</c> = <c>TRUE</c>. In so doing,
            the <c>nCopies</c> member of the <c>PRINTDLG</c> structure is always 1 and <c>PD_COLLATE</c> is always <c>FALSE</c>.
            </para>
            <para>
            To ensure that PrintDlg or PrintDlgEx returns the correct values in <c>nCopies</c> and <c>PD_COLLATE</c>, set
            <c>PD_RETURNDC</c> = <c>TRUE</c> and <c>PD_USEDEVMODECOPIESANDCOLLATE</c> = <c>FALSE</c>. In so doing, <c>dmCopies</c> is
            always 1 and <c>dmCollate</c> is always <c>FALSE</c>.
            </para>
            <para>
            On Windows Vista and Windows 7, when you call PrintDlg or PrintDlgEx with <c>PD_RETURNDC</c> set to <c>TRUE</c> and
            <c>PD_USEDEVMODECOPIESANDCOLLATE</c> set to <c>FALSE</c>, the <c>PrintDlg</c> or <c>PrintDlgEx</c> function sets the number
            of copies in the <c>nCopies</c> member of the <c>PRINTDLG</c> structure, and it sets the number of copies in the structure
            represented by the hDC member of the <c>PRINTDLG</c> structure.
            </para>
            <para>
            When making calls to GDI, you must ignore the value of <c>nCopies</c>, consider the value as 1, and use the returned hDC to
            avoid printing duplicate copies.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.nFromPage">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The initial value for the starting page edit control.</para>
            <para>
            When PrintDlg returns, <c>nFromPage</c> is the starting page specified by the user. If the <c>Pages</c> radio button is
            selected when the user clicks the <c>Okay</c> button, <c>PrintDlg</c> sets the <c>PD_PAGENUMS</c> flag and does not return
            until the user enters a starting page value that is within the minimum to maximum page range.
            </para>
            <para>
            If the input value for either <c>nFromPage</c> or <c>nToPage</c> is outside the minimum/maximum range, PrintDlg returns an
            error only if the <c>PD_PAGENUMS</c> flag is specified; otherwise, it displays the dialog box but changes the out-of-range
            value to the minimum or maximum value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.nToPage">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The initial value for the ending page edit control. When PrintDlg returns, <c>nToPage</c> is the ending page specified by
            the user. If the <c>Pages</c> radio button is selected when the use clicks the <c>Okay</c> button, <c>PrintDlg</c> sets the
            <c>PD_PAGENUMS</c> flag and does not return until the user enters an ending page value that is within the minimum to maximum
            page range.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.nMinPage">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The minimum value for the page range specified in the <c>From</c> and <c>To</c> page edit controls. If <c>nMinPage</c>
            equals <c>nMaxPage</c>, the <c>Pages</c> radio button and the starting and ending page edit controls are disabled.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.nMaxPage">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The maximum value for the page range specified in the <c>From</c> and <c>To</c> page edit controls.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.nCopies">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>
            The initial number of copies for the <c>Copies</c> edit control if <c>hDevMode</c> is <c>NULL</c>; otherwise, the
            <c>dmCopies</c> member of the DEVMODE structure contains the initial value. When PrintDlg returns, <c>nCopies</c> contains
            the actual number of copies to print. This value depends on whether the application or the printer driver is responsible for
            printing multiple copies. If the <c>PD_USEDEVMODECOPIESANDCOLLATE</c> flag is set in the <c>Flags</c> member, <c>nCopies</c>
            is always 1 on return, and the printer driver is responsible for printing multiple copies. If the flag is not set, the
            application is responsible for printing the number of copies specified by <c>nCopies</c>. For more information, see the
            description of the <c>PD_USEDEVMODECOPIESANDCOLLATE</c> flag.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hInstance">
            <summary>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the <c>PD_ENABLEPRINTTEMPLATE</c> or <c>PD_ENABLESETUPTEMPLATE</c> flag is set in the <c>Flags</c> member,
            <c>hInstance</c> is a handle to the application or module instance that contains the dialog box template named by the
            <c>lpPrintTemplateName</c> or <c>lpSetupTemplateName</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.lCustData">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>
            Application-defined data that the system passes to the hook procedure identified by the <c>lpfnPrintHook</c> or
            <c>lpfnSetupHook</c> member. When the system sends the WM_INITDIALOG message to the hook procedure, the message's lParam
            parameter is a pointer to the <c>PRINTDLG</c> structure specified when the dialog was created. The hook procedure can use
            this pointer to get the <c>lCustData</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.lpfnPrintHook">
            <summary>
            <para>Type: <c>LPPRINTHOOKPROC</c></para>
            <para>
            A pointer to a PrintHookProc hook procedure that can process messages intended for the <c>Print</c> dialog box. This member
            is ignored unless the <c>PD_ENABLEPRINTHOOK</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.lpfnSetupHook">
            <summary>
            <para>Type: <c>LPSETUPHOOKPROC</c></para>
            <para>
            A pointer to a SetupHookProc hook procedure that can process messages intended for the <c>Print Setup</c> dialog box. This
            member is ignored unless the <c>PD_ENABLESETUPHOOK</c> flag is set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.lpPrintTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template replaces
            the default <c>Print</c> dialog box template. This member is ignored unless the <c>PD_ENABLEPRINTTEMPLATE</c> flag is set in
            the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.lpSetupTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template replaces
            the default <c>Print Setup</c> dialog box template. This member is ignored unless the <c>PD_ENABLESETUPTEMPLATE</c> flag is
            set in the <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hPrintTemplate">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            If the <c>PD_ENABLEPRINTTEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hPrintTemplate</c> is a handle to a
            memory object containing a dialog box template. This template replaces the default <c>Print</c> dialog box template.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLG.hSetupTemplate">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            If the <c>PD_ENABLESETUPTEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hSetupTemplate</c> is a handle to a
            memory object containing a dialog box template. This template replaces the default <c>Print Setup</c> dialog box template.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PRINTDLGEX">
            <summary>
            Contains information that the PrintDlgEx function uses to initialize the Print property sheet. After the user closes the
            property sheet, the system uses this structure to return information about the user's selections.
            </summary>
            <remarks>
            <para>
            If both <c>hDevMode</c> and <c>hDevNames</c> are <c>NULL</c>, PrintDlgEx initializes the property sheet using the current
            default printer. To initialize the property sheet for a different printer, use the <c>wDeviceOffset</c> member of the DEVNAMES
            structure to specify the name of the printer.
            </para>
            <para>
            Note that the <c>dmDeviceName</c> member of the DEVMODE structure also specifies a printer name. However, <c>dmDeviceName</c> is
            limited to 32 characters, and the <c>wDeviceOffset</c> name is not. If the <c>wDeviceOffset</c> and <c>dmDeviceName</c> names
            are not the same, PrintDlgEx initializes the property sheet using the printer specified by <c>wDeviceOffset</c>.
            </para>
            <para>
            If the PD_RETURNDEFAULT flag is set and both <c>hDevMode</c> and <c>hDevNames</c> are <c>NULL</c>, PrintDlgEx uses the
            <c>hDevNames</c> and <c>hDevMode</c> members to return information about the current default printer without displaying the
            dialog box.
            </para>
            <para>
            During the execution of PrintDlgEx, the DEVMODE and <c>DEVNAMES</c> structures that you specified in the <c>PRINTDLGEX</c>
            structure may not always contain current data. For this reason, application-specific property pages as well as
            IPrintDialogCallback routines for the initial page should use the IPrintDialogServices interface to retrieve information about
            the state of the current printer.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.lStructSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The structure size, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.hwndOwner">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window that owns the property sheet. This member must be a valid window handle; it cannot be <c>NULL</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.hDevMode">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            A handle to a movable global memory object that contains a DEVMODE structure. If <c>hDevMode</c> is not <c>NULL</c> on
            input, you must allocate a movable block of memory for the <c>DEVMODE</c> structure and initialize its members. The
            PrintDlgEx function uses the input data to initialize the controls in the property sheet. When <c>PrintDlgEx</c> returns,
            the <c>DEVMODE</c> members indicate the user's input.
            </para>
            <para>
            If <c>hDevMode</c> is <c>NULL</c> on input, PrintDlgEx allocates memory for the DEVMODE structure, initializes its members
            to indicate the user's input, and returns a handle that identifies it.
            </para>
            <para>
            For more information about the <c>hDevMode</c> and <c>hDevNames</c> members, see the Remarks section at the end of this topic.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.hDevNames">
            <summary>
            <para>Type: <c>HGLOBAL</c></para>
            <para>
            A handle to a movable global memory object that contains a DEVNAMES structure. If <c>hDevNames</c> is not <c>NULL</c> on
            input, you must allocate a movable block of memory for the <c>DEVNAMES</c> structure and initialize its members. The
            PrintDlgEx function uses the input data to initialize the controls in the property sheet. When <c>PrintDlgEx</c> returns,
            the <c>DEVNAMES</c> members contain information for the printer chosen by the user. You can use this information to create a
            device context or an information context.
            </para>
            <para>
            The <c>hDevNames</c> member can be <c>NULL</c>, in which case, PrintDlgEx allocates memory for the DEVNAMES structure,
            initializes its members to indicate the user's input, and returns a handle that identifies it.
            </para>
            <para>
            For more information about the <c>hDevMode</c> and <c>hDevNames</c> members, see the Remarks section at the end of this topic.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.hDC">
            <summary>
            <para>Type: <c>HDC</c></para>
            <para>
            A handle to a device context or an information context, depending on whether the <c>Flags</c> member specifies the
            <c>PD_RETURNDC</c> or <c>PC_RETURNIC</c> flag. If neither flag is specified, the value of this member is undefined. If both
            flags are specified, <c>PD_RETURNDC</c> has priority.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.Flags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags that you can use to initialize the <c>Print</c> property sheet. When the PrintDlgEx function returns, it
            sets these flags to indicate the user's input. This member can be one or more of the following values.
            </para>
            <para>
            To ensure that PrintDlg or PrintDlgEx returns the correct values in the <c>dmCopies</c> and <c>dmCollate</c> members of the
            DEVMODE structure, set <c>PD_RETURNDC</c> = <c>TRUE</c> and <c>PD_USEDEVMODECOPIESANDCOLLATE</c> = <c>TRUE</c>. In so doing,
            the <c>nCopies</c> member of the PRINTDLG structure is always 1 and <c>PD_COLLATE</c> is always <c>FALSE</c>.
            </para>
            <para>
            To ensure that PrintDlg or PrintDlgEx returns the correct values in <c>nCopies</c> and <c>PD_COLLATE</c>, set
            <c>PD_RETURNDC</c> = <c>TRUE</c> and <c>PD_USEDEVMODECOPIESANDCOLLATE</c> = <c>FALSE</c>. In so doing, <c>dmCopies</c> is
            always 1 and <c>dmCollate</c> is always <c>FALSE</c>.
            </para>
            <para>
            Starting with Windows Vista, when you call PrintDlg or PrintDlgEx with <c>PD_RETURNDC</c> set to <c>TRUE</c> and
            <c>PD_USEDEVMODECOPIESANDCOLLATE</c> set to <c>FALSE</c>, the <c>PrintDlg</c> or <c>PrintDlgEx</c> function sets the number
            of copies in the <c>nCopies</c> member of the PRINTDLG structure, and it sets the number of copies in the structure
            represented by the <c>hDC</c> member of the <c>PRINTDLG</c> structure.
            </para>
            <para>
            When making calls to GDI, you must ignore the value of <c>nCopies</c>, consider the value as 1, and use the returned
            <c>hDC</c> to avoid printing duplicate copies.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PD_ALLPAGES 0x00000000</term>
            <term>
            The default flag that indicates that the All radio button is initially selected. This flag is used as a placeholder to
            indicate that the PD_PAGENUMS, PD_SELECTION, and PD_CURRENTPAGE flags are not specified.
            </term>
            </item>
            <item>
            <term>PD_COLLATE 0x00000010</term>
            <term>
            If this flag is set, the Collate check box is selected. If this flag is set when the PrintDlgEx function returns, the
            application must simulate collation of multiple copies. For more information, see the description of the
            PD_USEDEVMODECOPIESANDCOLLATE flag. See PD_NOPAGENUMS.
            </term>
            </item>
            <item>
            <term>PD_CURRENTPAGE 0x00400000</term>
            <term>
            If this flag is set, the Current Page radio button is selected. If none of the PD_PAGENUMS, PD_SELECTION, or PD_CURRENTPAGE
            flags is set, the All radio button is selected.
            </term>
            </item>
            <item>
            <term>PD_DISABLEPRINTTOFILE 0x00080000</term>
            <term>Disables the Print to File check box.</term>
            </item>
            <item>
            <term>PD_ENABLEPRINTTEMPLATE 0x00004000</term>
            <term>
            Indicates that the hInstance and lpPrintTemplateName members specify a replacement for the default dialog box template in
            the lower portion of the General page. The default template contains controls similar to those of the Print dialog box. The
            system uses the specified template to create a window that is a child of the General page.
            </term>
            </item>
            <item>
            <term>PD_ENABLEPRINTTEMPLATEHANDLE 0x00010000</term>
            <term>
            Indicates that the hInstance member identifies a data block that contains a preloaded dialog box template. This template
            replaces the default dialog box template in the lower portion of the General page. The system uses the specified template to
            create a window that is a child of the General page. The system ignores the lpPrintTemplateName member if this flag is specified.
            </term>
            </item>
            <item>
            <term>PD_EXCLUSIONFLAGS 0x01000000</term>
            <term>
            Indicates that the ExclusionFlags member identifies items to be excluded from the printer driver property pages. If this
            flag is not set, items will be excluded by default from the printer driver property pages. The exclusions prevent the
            duplication of items among the General page, any application-specified pages, and the printer driver pages.
            </term>
            </item>
            <item>
            <term>PD_HIDEPRINTTOFILE 0x00100000</term>
            <term>Hides the Print to File check box.</term>
            </item>
            <item>
            <term>PD_NOCURRENTPAGE 0x00800000</term>
            <term>Disables the Current Page radio button.</term>
            </item>
            <item>
            <term>PD_NOPAGENUMS 0x00000008</term>
            <term>
            Disables the Pages radio button and the associated edit controls. Also, it causes the Collate check box to appear in the dialog.
            </term>
            </item>
            <item>
            <term>PD_NOSELECTION 0x00000004</term>
            <term>Disables the Selection radio button.</term>
            </item>
            <item>
            <term>PD_NOWARNING 0x00000080</term>
            <term>Prevents the warning message from being displayed when an error occurs.</term>
            </item>
            <item>
            <term>PD_PAGENUMS 0x00000002</term>
            <term>
            If this flag is set, the Pages radio button is selected. If none of the PD_PAGENUMS, PD_SELECTION, or PD_CURRENTPAGE flags
            is set, the All radio button is selected. If this flag is set when the PrintDlgEx function returns, the lpPageRanges member
            indicates the page ranges specified by the user.
            </term>
            </item>
            <item>
            <term>PD_PRINTTOFILE 0x00000020</term>
            <term>
            If this flag is set, the Print to File check box is selected. If this flag is set when PrintDlgEx returns, the offset
            indicated by the wOutputOffset member of the DEVNAMES structure contains the string "FILE:". When you call the StartDoc
            function to start the printing operation, specify this "FILE:" string in the lpszOutput member of the DOCINFO structure.
            Specifying this string causes the print subsystem to query the user for the name of the output file.
            </term>
            </item>
            <item>
            <term>PD_RETURNDC 0x00000100</term>
            <term>
            Causes PrintDlgEx to return a device context matching the selections the user made in the property sheet. The device context
            is returned in hDC.
            </term>
            </item>
            <item>
            <term>PD_RETURNDEFAULT 0x00000400</term>
            <term>
            If this flag is set, the PrintDlgEx function does not display the property sheet. Instead, it sets the hDevNames and
            hDevMode members to handles to DEVNAMES and DEVMODE structures that are initialized for the system default printer. Both
            hDevNames and hDevMode must be NULL, or PrintDlgEx returns an error.
            </term>
            </item>
            <item>
            <term>PD_RETURNIC 0x00000200</term>
            <term>
            Similar to the PD_RETURNDC flag, except this flag returns an information context rather than a device context. If neither
            PD_RETURNDC nor PD_RETURNIC is specified, hDC is undefined on output.
            </term>
            </item>
            <item>
            <term>PD_SELECTION 0x00000001</term>
            <term>
            If this flag is set, the Selection radio button is selected. If none of the PD_PAGENUMS, PD_SELECTION, or PD_CURRENTPAGE
            flags is set, the All radio button is selected.
            </term>
            </item>
            <item>
            <term>PD_USEDEVMODECOPIES 0x00040000</term>
            <term>Same as PD_USEDEVMODECOPIESANDCOLLATE.</term>
            </item>
            <item>
            <term>PD_USEDEVMODECOPIESANDCOLLATE 0x00040000</term>
            <term>
            This flag indicates whether your application supports multiple copies and collation. Set this flag on input to indicate that
            your application does not support multiple copies and collation. In this case, the nCopies member of the PRINTDLGEX
            structure always returns 1, and PD_COLLATE is never set in the Flags member. If this flag is not set, the application is
            responsible for printing and collating multiple copies. In this case, the nCopies member of the PRINTDLGEX structure
            indicates the number of copies the user wants to print, and the PD_COLLATE flag in the Flags member indicates whether the
            user wants collation. Regardless of whether this flag is set, an application can determine from nCopies and PD_COLLATE how
            many copies to render and whether to print them collated. If this flag is set and the printer driver does not support
            multiple copies, the Copies edit control is disabled. Similarly, if this flag is set and the printer driver does not support
            collation, the Collate check box is disabled. The dmCopies and dmCollate members of the DEVMODE structure contain the copies
            and collate information used by the printer driver. If this flag is set and the printer driver supports multiple copies, the
            dmCopies member indicates the number of copies requested by the user. If this flag is set and the printer driver supports
            collation, the dmCollate member of the DEVMODE structure indicates whether the user wants collation. If this flag is not
            set, the dmCopies member always returns 1, and the dmCollate member is always zero. In Windows versions prior to Windows
            Vista, if this flag is not set by the calling application and the dmCopies member of the DEVMODE structure is greater than
            1, use that value for the number of copies; otherwise, use the value of the nCopies member of the PRINTDLGEX structure.
            </term>
            </item>
            <item>
            <term>PD_USELARGETEMPLATE 0x10000000</term>
            <term>
            Forces the property sheet to use a large template for the General page. The larger template provides more space for
            applications that specify a custom template for the lower portion of the General page.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.Flags2">
            <summary>Type: <c>DWORD</c></summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.ExclusionFlags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A set of bit flags that can exclude items from the printer driver property pages in the <c>Print</c> property sheet. This
            value is used only if the <c>PD_EXCLUSIONFLAGS</c> flag is set in the <c>Flags</c> member. Exclusion flags should be used
            only if the item to be excluded will be included on either the <c>General</c> page or on an application-defined page in the
            <c>Print</c> property sheet. This member can specify the following flag.
            </para>
            <para>PD_EXCL_COPIESANDCOLLATE</para>
            <para>
            Excludes the <c>Copies</c> and <c>Collate</c> controls from the printer driver property pages in a <c>Print</c> property
            sheet. This flag should always be set when the application uses the default <c>Copies</c> and <c>Collate</c> controls
            provided by the lower portion of the <c>General</c> page of the <c>Print</c> property sheet.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nPageRanges">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            On input, set this member to the initial number of page ranges specified in the <c>lpPageRanges</c> array. When the
            PrintDlgEx function returns, <c>nPageRanges</c> indicates the number of user-specified page ranges stored in the
            <c>lpPageRanges</c> array. If the <c>PD_NOPAGENUMS</c> flag is specified, this value is not valid.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nMaxPageRanges">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The size, in array elements, of the <c>lpPageRanges</c> buffer. This value indicates the maximum number of page ranges that
            can be stored in the array. If the <c>PD_NOPAGENUMS</c> flag is specified, this value is not valid. If the
            <c>PD_NOPAGENUMS</c> flag is not specified, this value must be greater than zero.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.lpPageRanges">
            <summary>
            <para>Type: <c>LPPRINTPAGERANGE</c></para>
            <para>
            Pointer to a buffer containing an array of PRINTPAGERANGE structures. On input, the array contains the initial page ranges
            to display in the <c>Pages</c> edit control. When the PrintDlgEx function returns, the array contains the page ranges
            specified by the user. If the <c>PD_NOPAGENUMS</c> flag is specified, this value is not valid. If the <c>PD_NOPAGENUMS</c>
            flag is not specified, <c>lpPageRanges</c> must be non- <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nMinPage">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The minimum value for the page ranges specified in the <c>Pages</c> edit control. If the <c>PD_NOPAGENUMS</c> flag is
            specified, this value is not valid.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nMaxPage">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The maximum value for the page ranges specified in the <c>Pages</c> edit control. If the <c>PD_NOPAGENUMS</c> flag is
            specified, this value is not valid.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nCopies">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            Contains the initial number of copies for the <c>Copies</c> edit control if <c>hDevMode</c> is <c>NULL</c>; otherwise, the
            <c>dmCopies</c> member of the DEVMODE structure contains the initial value. When PrintDlgEx returns, <c>nCopies</c> contains
            the actual number of copies the application must print. This value depends on whether the application or the printer driver
            is responsible for printing multiple copies. If the <c>PD_USEDEVMODECOPIESANDCOLLATE</c> flag is set in the <c>Flags</c>
            member, <c>nCopies</c> is always 1 on return, and the printer driver is responsible for printing multiple copies. If the
            flag is not set, the application is responsible for printing the number of copies specified by <c>nCopies</c>. For more
            information, see the description of the <c>PD_USEDEVMODECOPIESANDCOLLATE</c> flag.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.hInstance">
            <summary>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the <c>PD_ENABLEPRINTTEMPLATE</c> flag is set in the <c>Flags</c> member, <c>hInstance</c> is a handle to the application
            or module instance that contains the dialog box template named by the <c>lpPrintTemplateName</c> member. If the
            <c>PD_ENABLEPRINTTEMPLATEHANDLE</c> flag is set in the <c>Flags</c> member, <c>hInstance</c> is a handle to a memory object
            containing a dialog box template. If neither of the template flags is set in the <c>Flags</c> member, <c>hInstance</c>
            should be <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.lpPrintTemplateName">
            <summary>
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The name of the dialog box template resource in the module identified by the <c>hInstance</c> member. This template replaces
            the default dialog box template in the lower portion of the <c>General</c> page. The default template contains controls
            similar to those of the <c>Print</c> dialog box. This member is ignored unless the PD_ENABLEPRINTTEMPLATE flag is set in the
            <c>Flags</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.lpCallback">
            <summary>
            <para>Type: <c>LPUNKNOWN</c></para>
            <para>A pointer to an application-defined callback object.</para>
            <para>
            The object should contain the IPrintDialogCallback class to receive messages for the child dialog box in the lower portion
            of the <c>General</c> page.
            </para>
            <para>
            The callback object should also contain the IObjectWithSite class to receive a pointer to the IPrintDialogServices
            interface. The PrintDlgEx function calls IUnknown::QueryInterface on the callback object for both
            <c>IID_IPrintDialogCallback</c> and <c>IID_IObjectWithSite</c> to determine which interfaces are supported.
            </para>
            <para>If you do not want to retrieve any of the callback information, set <c>lpCallback</c> to <c>NULL</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nPropertyPages">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of property page handles in the <c>lphPropertyPages</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.lphPropertyPages">
            <summary>
            <para>Type: <c>HPROPSHEETPAGE*</c></para>
            <para>
            Contains an array of property page handles to add to the <c>Print</c> property sheet. The additional property pages follow
            the <c>General</c> page. Use the CreatePropertySheetPage function to create these additional pages. When the PrintDlgEx
            function returns, all the <c>HPROPSHEETPAGE</c> handles in the <c>lphPropertyPages</c> array have been destroyed. If
            <c>nPropertyPages</c> is zero, <c>lphPropertyPages</c> should be <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.nStartPage">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The property page that is initially displayed. To display the <c>General</c> page, specify <c>START_PAGE_GENERAL</c>.
            Otherwise, specify the zero-based index of a property page in the array specified in the <c>lphPropertyPages</c> member. For
            consistency, it is recommended that the property sheet always be started on the <c>General</c> page.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTDLGEX.dwResultAction">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            On input, set this member to zero. If the PrintDlgEx function returns S_OK, <c>dwResultAction</c> contains the outcome of
            the dialog. If <c>PrintDlgEx</c> returns an error, this member should be ignored. The <c>dwResultAction</c> member can be
            one of the following values.
            </para>
            <para>PD_RESULT_APPLY</para>
            <para>
            The user clicked the <c>Apply</c> button and later clicked the <c>Cancel</c> button. This indicates that the user wants to
            apply the changes made in the property sheet, but does not want to print yet. The <c>PRINTDLGEX</c> structure contains the
            information specified by the user at the time the <c>Apply</c> button was clicked.
            </para>
            <para>PD_RESULT_CANCEL</para>
            <para>The user clicked the <c>Cancel</c> button. The information in the <c>PRINTDLGEX</c> structure is unchanged.</para>
            <para>PD_RESULT_PRINT</para>
            <para>
            The user clicked the <c>Print</c> button. The <c>PRINTDLGEX</c> structure contains the information specified by the user.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.PRINTPAGERANGE">
            <summary>
            Represents a range of pages in a print job. A print job can have more than one page range. This information is supplied in the
            PRINTDLGEX structure when calling the PrintDlgEx function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTPAGERANGE.nFromPage">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The first page of the range.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.PRINTPAGERANGE.nToPage">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The last page of the range.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.COLOROKSTRING">
            <summary>
            A Color dialog box sends the COLOROKSTRING registered message to your hook procedure, CCHookProc, when the user selects a color
            and clicks the OK button. The hook procedure can accept the color and allow the dialog box to close, or reject the color and
            force the dialog box to remain open.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FILEOKSTRING">
            <summary>
            An Open or Save As dialog box sends the FILEOKSTRING registered message to your hook procedure, OFNHookProc, when the user
            specifies a file name and clicks the OK button. The hook procedure can accept the file name and allow the dialog box to close,
            or reject the file name and force the dialog box to remain open.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.FINDMSGSTRING">
            <summary>
            A Find or Replace dialog box sends the FINDMSGSTRING registered message to the window procedure of its owner window when the
            user clicks the Find Next, Replace, or Replace All button, or closes the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.HELPMSGSTRING">
            <summary>
            A common dialog box sends the HELPMSGSTRING registered message to the window procedure of its owner window when the user clicks
            the Help button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.LBSELCHSTRING">
            <summary>
            An Open or Save As dialog box sends the LBSELCHSTRING registered message to your hook procedure when the selection changes in
            any of the list boxes or combo boxes of the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.SETRGBSTRING">
            <summary>
            The hook procedure of a Color dialog box, CCHookProc, can send the SETRGBSTRING registered message to the dialog box to set the
            current color selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComDlg32.SHAREVISTRING">
            <summary>
            An Open or Save As dialog box sends the SHAREVISTRING registered message to your hook procedure, OFNHookProc, if a sharing
            violation occurs for the selected file when the user clicks the OK button.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPCCHOOKPROC">
            <summary>
            <para>
            Receives messages or notifications intended for the default dialog box procedure of the <c>Color</c> dialog box. This is an
            application-defined or library-defined callback function that is used with the ChooseColor function.
            </para>
            <para>
            The <c>LPCCHOOKPROC</c> type defines a pointer to this callback function. CCHookProc is a placeholder for the
            application-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Color</c> dialog box for which the message is intended.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">
            Additional information about the message. The exact meaning depends on the value of the Arg2 parameter. If the Arg2 parameter
            indicates the WM_INITDIALOG message, then Arg4 is a pointer to a CHOOSECOLOR structure containing the values specified when the
            dialog was created.
            </param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            </returns>
            <remarks>
            <para>
            When you use the ChooseColor function to create a <c>Color</c> dialog box, you can provide a CCHookProc hook procedure to
            process messages or notifications intended for the dialog box procedure. To enable the hook procedure, use the CHOOSECOLOR
            structure that you passed to the dialog creation function. Specify the address of the hook procedure in the <c>lpfnHook</c>
            member and specify the <c>CC_ENABLEHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other
            messages, the hook procedure receives the message first. Then, the return value of the hook procedure determines whether the
            default dialog procedure processes the message or ignores it.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle to painting the background of
            the dialog box. In general, if the hook procedure processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle
            to painting the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDABORT</c> value to the dialog box procedure. Posting <c>IDABORT</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            <para>
            You can subclass the standard controls of a common dialog box. However, the dialog box procedure may also subclass the controls.
            Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that
            your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPCFHOOKPROC">
            <summary>
            <para>
            Receives messages or notifications intended for the default dialog box procedure of the <c>Font</c> dialog box. This is an
            application-defined or library-defined callback procedure that is used with the ChooseFont function.
            </para>
            <para>
            The <c>LPCFHOOKPROC</c> type defines a pointer to this callback function. CFHookProc is a placeholder for the
            application-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Font</c> dialog box for which the message is intended.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">
            Additional information about the message. The exact meaning depends on the value of the Arg2 parameter. If the Arg2 parameter
            indicates the WM_INITDIALOG message, Arg4 is a pointer to a CHOOSEFONT structure containing the values specified when the dialog
            box was created.
            </param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            </returns>
            <remarks>
            <para>
            When you use the ChooseFont function to create a <c>Font</c> dialog box, you can provide a CFHookProc hook procedure to process
            messages or notifications intended for the dialog box procedure. To enable the hook procedure, use the <c>CHOOSEFONT</c>
            structure that you passed to the dialog creation function. Specify the address of the hook procedure in the <c>lpfnHook</c>
            member and specify the <c>CF_ENABLEHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other
            messages, the hook procedure receives the message first. The return value of the hook procedure determines whether the default
            dialog box procedure processes the message or ignores it.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle to paint the background of the
            dialog box. In general, if the hook procedure processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle to
            paint the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDABORT</c> value to the dialog box procedure. Posting <c>IDABORT</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            <para>
            You can subclass the standard controls of a common dialog box. However, the dialog box procedure may also subclass the controls.
            Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that
            your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPFRHOOKPROC">
            <summary>
            <para>
            Receives messages or notifications intended for the default dialog box procedure of the <c>Find</c> or <c>Replace</c> dialog
            box. The FRHookProc hook procedure is an application-defined or library-defined callback function that is used with the FindText
            or ReplaceText function.
            </para>
            <para>
            The <c>LPFRHOOKPROC</c> type defines a pointer to this callback function. FRHookProc is a placeholder for the
            application-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Find</c> or <c>Replace</c> dialog box for which the message is intended.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">
            <para>Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</para>
            <para>
            If the Arg2 parameter indicates the WM_INITDIALOG message, Arg4 is a pointer to a FINDREPLACE structure containing the values
            specified when the dialog box was created.
            </para>
            </param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            </returns>
            <remarks>
            <para>
            When you use the FindText or ReplaceText functions to create a <c>Find</c> or <c>Replace</c> dialog box, you can provide an
            FRHookProc hook procedure to process messages or notifications intended for the dialog box procedure. To enable the hook
            procedure, use the FINDREPLACE structure that you passed to the dialog creation function. Specify the address of the hook
            procedure in the <c>lpfnHook</c> member and specify the <c>FR_ENABLEHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other
            messages, the hook procedure receives the message first. Then, the return value of the hook procedure determines whether the
            default dialog procedure processes the message or ignores it.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle for painting the background of
            the dialog box. In general, if the hook procedure processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle
            for painting the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDABORT</c> value to the dialog box procedure. Posting <c>IDABORT</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            <para>
            You can subclass the standard controls of a common dialog box. However, the dialog box procedure may also subclass the controls.
            Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that
            your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPOFNHOOKPROC">
            <summary>
            <para>
            [Starting with Windows Vista, the <c>Open</c> and <c>Save As</c> common dialog boxes have been superseded by the Common Item
            Dialog. We recommended that you use the Common Item Dialog API instead of these dialog boxes from the Common Dialog Box Library.]
            </para>
            <para>
            Receives notification messages sent from the dialog box. The function also receives messages for any additional controls that
            you defined by specifying a child dialog template. The OFNHookProc hook procedure is an application-defined or library-defined
            callback function that is used with the Explorer-style <c>Open</c> and <c>Save As</c> dialog boxes.
            </para>
            <para>
            The <c>LPOFNHOOKPROC</c> type defines a pointer to this callback function. OFNHookProc is a placeholder for the
            application-defined function name.
            </para>
            </summary>
            <param name="Arg1">
            A handle to the child dialog box of the <c>Open</c> or <c>Save As</c> dialog box. Use the GetParent function to get the handle
            to the <c>Open</c> or <c>Save As</c> dialog box.
            </param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">
            Additional information about the message. The exact meaning depends on the value of the Arg2 parameter. If the Arg2 parameter
            indicates the WM_INITDIALOG message, Arg4 is a pointer to an OPENFILENAME structure containing the values specified when the
            dialog box was created.
            </param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            <para>
            For the CDN_SHAREVIOLATION and CDN_FILEOK notification messages, the hook procedure should return a nonzero value to indicate
            that it has used the SetWindowLong function to set a nonzero <c>DWL_MSGRESULT</c> value.
            </para>
            </returns>
            <remarks>
            <para>
            If you do not specify the <c>OFN_EXPLORER</c> flag when you create an <c>Open</c> or <c>Save As</c> dialog box, and you want a
            hook procedure, you must use an old-style OFNHookProcOldStyle hook procedure. In this case, the dialog box will have the
            old-style user interface.
            </para>
            <para>
            When you use the GetOpenFileName or GetSaveFileName functions to create an Explorer-style <c>Open</c> or <c>Save As</c> dialog
            box, you can provide an OFNHookProc hook procedure. To enable the hook procedure, use the OPENFILENAME structure that you passed
            to the dialog creation function. Specify the pointer to the hook procedure in the <c>lpfnHook</c> member and specify the
            <c>OFN_ENABLEHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            If you provide a hook procedure for an Explorer-style common dialog box, the system creates a dialog box that is a child of the
            default dialog box. The hook procedure acts as the dialog procedure for the child dialog. This child dialog is based on the
            template you specified in the OPENFILENAME structure, or it is a default child dialog if no template is specified. The child
            dialog is created when the default dialog procedure is processing its WM_INITDIALOG message. After the child dialog processes
            its own <c>WM_INITDIALOG</c> message, the default dialog procedure moves the standard controls, if necessary, to make room for
            any additional controls of the child dialog. The system then sends the CDN_INITDONE notification message to the hook procedure.
            </para>
            <para>
            The hook procedure does not receive messages intended for the standard controls of the default dialog box. You can subclass the
            standard controls, but this is discouraged because it may make your application incompatible with later versions. However, the
            Explorer-style common dialog boxes provide a set of messages that the hook procedure can use to monitor and control the dialog.
            These include a set of notification messages sent from the dialog, as well as messages that you can send to retrieve information
            from the dialog. For a complete list of these messages, see Explorer-Style Hook Procedures.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle to painting the background of
            the dialog box. In general, if it processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle to painting the
            background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDCANCEL</c> value to the dialog box procedure. Posting <c>IDCANCEL</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPPAGEPAINTHOOK">
            <summary>
            <para>
            Receives messages that allow you to customize drawing of the sample page in the <c>Page Setup</c> dialog box. The PagePaintHook
            hook procedure is an application-defined or library-defined callback function used with the PageSetupDlg function.
            </para>
            <para>
            The <c>LPPAGEPAINTHOOK</c> type defines a pointer to this callback function. PagePaintHook is a placeholder for the
            application-defined or library-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Page Setup</c> dialog box.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <returns>
            <para>
            If the hook procedure returns <c>TRUE</c> for any of the first three messages of a drawing sequence (WM_PSD_PAGESETUPDLG,
            WM_PSD_FULLPAGERECT, or WM_PSD_MINMARGINRECT), the dialog box sends no more messages and does not draw in the sample page until
            the next time the system needs to redraw the sample page. If the hook procedure returns <c>FALSE</c> for all three messages, the
            dialog box sends the remaining messages of the drawing sequence.
            </para>
            <para>
            If the hook procedure returns <c>TRUE</c> for any of the remaining messages in a drawing sequence, the dialog box does not draw
            the corresponding portion of the sample page. If the hook procedure returns <c>FALSE</c> for any of these messages, the dialog
            box draws that portion of the sample page.
            </para>
            </returns>
            <remarks>
            <para>
            The <c>Page Setup</c> dialog box includes an image of a sample page that shows how the user's selections affect the appearance
            of the printed output. The image consists of a rectangle that represents the selected paper or envelope type, with a dotted-line
            rectangle representing the current margins, and partial (Greek text) characters to show how text looks on the printed page. When
            you use the PageSetupDlg function to create a <c>Page Setup</c> dialog box, you can provide a PagePaintHook hook procedure to
            customize the appearance of the sample page.
            </para>
            <para>
            To enable the hook procedure, use the PAGESETUPDLG structure that you passed to the creation function. Specify the pointer to
            the hook procedure in the <c>lpfnPagePaintHook</c> member and specify the <c>PSD_ENABLEPAGEPAINTHOOK</c> flag in the
            <c>Flags</c> member.
            </para>
            <para>
            Whenever the dialog box is about to draw the contents of the sample page, the hook procedure receives the following messages in
            the order in which they are listed.
            </para>
            <list type="table">
            <listheader>
            <term>Message</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>WM_PSD_PAGESETUPDLG</term>
            <term>
            The dialog box is about to draw the sample page. The hook procedure can use this message to prepare to draw the contents of the
            sample page.
            </term>
            </item>
            <item>
            <term>WM_PSD_FULLPAGERECT</term>
            <term>The dialog box is about to draw the sample page. This message specifies the bounding rectangle of the sample page.</term>
            </item>
            <item>
            <term>WM_PSD_MINMARGINRECT</term>
            <term>The dialog box is about to draw the sample page. This message specifies the margin rectangle.</term>
            </item>
            <item>
            <term>WM_PSD_MARGINRECT</term>
            <term>The dialog box is about to draw the margin rectangle.</term>
            </item>
            <item>
            <term>WM_PSD_GREEKTEXTRECT</term>
            <term>The dialog box is about to draw the Greek text inside the margin rectangle.</term>
            </item>
            <item>
            <term>WM_PSD_ENVSTAMPRECT</term>
            <term>
            The dialog box is about to draw in the envelope-stamp rectangle of an envelope sample page. This message is sent for envelopes only.
            </term>
            </item>
            <item>
            <term>WM_PSD_YAFULLPAGERECT</term>
            <term>
            The dialog box is about to draw the return address portion of an envelope sample page. This message is sent for envelopes and
            other paper sizes.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPPAGESETUPHOOK">
            <summary>
            <para>
            Receives messages or notifications intended for the default dialog box procedure of the <c>Page Setup</c> dialog box. The
            PageSetupHook hook procedure is an application-defined or library-defined callback function used with the PageSetupDlg function.
            </para>
            <para>
            The <c>LPPAGESETUPHOOK</c> type defines a pointer to this callback function. PageSetupHook is a placeholder for the
            application-defined or library-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Page Setup</c> dialog box for which the message is intended.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">
            <para>Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</para>
            <para>
            If the Arg2 parameter indicates the WM_INITDIALOG message, Arg4 is a pointer to a PAGESETUPDLG structure containing the values
            specified when the dialog box was created.
            </para>
            </param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            </returns>
            <remarks>
            <para>
            When you use the PageSetupDlg function to create a <c>Page Setup</c> dialog box, you can provide a PageSetupHook hook procedure
            to process messages or notifications intended for the dialog box procedure. To enable the hook procedure, use the PAGESETUPDLG
            structure that you passed to the dialog creation function. Specify the pointer to the hook procedure in the
            <c>lpfnPageSetupHook</c> member and specify the <c>PSD_ENABLEPAGESETUPHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other
            messages, the hook procedure receives the message first. Then, the return value of the hook procedure determines whether the
            default dialog procedure processes the message or ignores it.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle to painting the background of
            the dialog box. In general, if the hook procedure processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle
            to painting the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDABORT</c> value to the dialog box procedure. Posting <c>IDABORT</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            <para>
            You can subclass the standard controls of a common dialog box. However, the dialog box procedure may also subclass the controls.
            Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that
            your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPPRINTHOOKPROC">
            <summary>
            <para>
            Receives messages or notifications intended for the default dialog box procedure of the <c>Print</c> dialog box. This is an
            application-defined or library-defined callback function that is used with the PrintDlg function.
            </para>
            <para>
            The <c>LPPRINTHOOKPROC</c> type defines a pointer to this callback function. PrintHookProc is a placeholder for the
            application-defined or library-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Print</c> dialog box for which the message is intended.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">
            <para>Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</para>
            <para>
            If the Arg2 parameter indicates the WM_INITDIALOG message, Arg4 is a pointer to a PRINTDLG structure containing the values
            specified when the dialog box was created.
            </para>
            </param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            </returns>
            <remarks>
            <para>
            When you use the PrintDlg function to create a <c>Print</c> dialog box, you can provide a PrintHookProc hook procedure to
            process messages or notifications intended for the dialog box procedure. To enable the hook procedure, use the PRINTDLG
            structure that you passed to the dialog creation function. Specify the address of the hook procedure in the <c>lpfnPrintHook</c>
            member and specify the <c>PD_ENABLEPRINTHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other
            messages, the hook procedure receives the message first. Then, the return value of the hook procedure determines whether the
            default dialog procedure processes the message or ignores it.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle to painting the background of
            the dialog box. In general, if the hook procedure processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle
            to painting the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDABORT</c> value to the dialog box procedure. Posting <c>IDABORT</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            <para>
            You can subclass the standard controls of a common dialog box. However, the dialog box procedure may also subclass the controls.
            Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that
            your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.LPSETUPHOOKPROC">
            <summary>
            <para>
            An application-defined or library-defined callback function used with the PrintDlg function. The hook procedure receives
            messages or notifications intended for the default dialog box procedure of the <c>Print Setup</c> dialog box.
            </para>
            <para>
            The <c>LPSETUPHOOKPROC</c> type defines a pointer to this callback function. SetupHookProc is a placeholder for the
            application-defined or library-defined function name.
            </para>
            </summary>
            <param name="Arg1">A handle to the <c>Print Setup</c> dialog box for which the message is intended.</param>
            <param name="Arg2">The identifier of the message being received.</param>
            <param name="Arg3">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <param name="Arg4">Additional information about the message. The exact meaning depends on the value of the Arg2 parameter.</param>
            <returns>
            <para>If the hook procedure returns zero, the default dialog box procedure processes the message.</para>
            <para>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</para>
            </returns>
            <remarks>
            <para>
            The <c>Print Setup</c> dialog box has been superseded by the <c>Page Setup</c> dialog box, which should be used by new
            applications. However, for compatibility, the PrintDlg function continues to support display of the <c>Print Setup</c> dialog
            box. You can provide a SetupHookProc hook procedure for the <c>Print Setup</c> dialog box to process messages or notifications
            intended for the dialog box procedure.
            </para>
            <para>
            To enable the hook procedure, use the PRINTDLG structure that you passed to the dialog creation function. Specify the address of
            the hook procedure in the <c>lpfnSetupHook</c> member and specify the <c>PD_ENABLESETUPHOOK</c> flag in the <c>Flags</c> member.
            </para>
            <para>
            The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other
            messages, the hook procedure receives the message first. Then, the return value of the hook procedure determines whether the
            default dialog procedure processes the message or ignores it.
            </para>
            <para>
            If the hook procedure processes the WM_CTLCOLORDLG message, it must return a valid brush handle to painting the background of
            the dialog box. In general, if the hook procedure processes any <c>WM_CTLCOLOR*</c> message, it must return a valid brush handle
            to painting the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the hook procedure. Instead, the hook procedure can call the PostMessage function to
            post a WM_COMMAND message with the <c>IDABORT</c> value to the dialog box procedure. Posting <c>IDABORT</c> closes the dialog
            box and causes the dialog box function to return <c>FALSE</c>. If you need to know why the hook procedure closed the dialog box,
            you must provide your own communication mechanism between the hook procedure and your application.
            </para>
            <para>
            You can subclass the standard controls of a common dialog box. However, the dialog box procedure may also subclass the controls.
            Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that
            your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.IPrintDialogCallback">
            <summary>
            Provides methods that enable an application to receive notifications and messages from the PrintDlgEx function while the Print
            Property Sheet is displayed.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.IPrintDialogCallback.InitDone">
            <summary>
            Called by PrintDlgEx when the system has finished initializing the <c>General</c> page of the Print Property Sheet.
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Return <c>S_OK</c> to prevent the PrintDlgEx function from performing its default actions.</para>
            <para>
            Return <c>S_FALSE</c> to allow PrintDlgEx to perform its default actions. Currently, <c>PrintDlgEx</c> does not perform any
            default processing after the <c>InitDone</c> call.
            </para>
            </returns>
            <remarks>
            If your callback object implements the IObjectWithSite interface, the PrintDlgEx function calls the IObjectWithSite::SetSite
            method to pass an IPrintDialogServices pointer to the callback object. The <c>PrintDlgEx</c> function calls the
            <c>IObjectWithSite::SetSite</c> method before calling the <c>InitDone</c> method. This enables your <c>InitDone</c>
            implementation to use the <c>IPrintDialogServices</c> methods to retrieve information about the currently selected printer.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.IPrintDialogCallback.SelectionChange">
            <summary>
            Called by PrintDlgEx when the user selects a different printer from the list of installed printers on the <c>General</c>
            page of the Print Property Sheet.
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Return <c>S_OK</c> to prevent the PrintDlgEx function from performing its default actions.</para>
            <para>
            Return <c>S_FALSE</c> to allow PrintDlgEx to perform its default actions, which include adjustments to the <c>Copies</c>,
            <c>Collate</c>, and <c>Print Range</c> items.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.IPrintDialogCallback.HandleMessage(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Called by PrintDlgEx to give your application an opportunity to handle messages sent to the child dialog box in the lower
            portion of the <c>General</c> page of the Print Property Sheet. The child dialog box contains controls similar to those of
            the <c>Print</c> dialog box.
            </summary>
            <param name="hDlg">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the child dialog box in the lower portion of the <c>General</c> page.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>The identifier of the message being received.</para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>Additional information about the message. The exact meaning depends on the value of the uMsg parameter.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>Additional information about the message. The exact meaning depends on the value of the uMsg parameter.</para>
            <para>
            If the uMsg parameter indicates the WM_INITDIALOG message, lParam is a pointer to a PRINTDLGEX structure containing the
            values specified when the property sheet was created.
            </para>
            </param>
            <param name="pResult">
            <para>Type: <c>LRESULT*</c></para>
            <para>
            Indicates the result to be returned by the dialog box procedure for the message. The value pointed to should be <c>TRUE</c>
            if you process the message, otherwise it should be <c>FALSE</c> or whatever is an appropriate value according to the message type.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Return <c>S_OK</c> if your <c>IPrintDialogCallback::HandleMessage</c> implementation handled the message. In this case, the
            PrintDlgEx function does not perform any default message handling.
            </para>
            <para>Return <c>S_FALSE</c> if you want PrintDlgEx to perform its default message handling.</para>
            </returns>
            <remarks>
            <para>
            For notification messages passed by the WM_NOTIFY message, you must use the SetWindowLong function with the
            <c>DWL_MSGRESULT</c> value to set a return value. When you call <c>SetWindowLong</c>, use GetParent(hDlg) to set the
            <c>DWL_MSGRESULT</c> value of the <c>General</c> page, which is the parent of the child window.
            </para>
            <para>
            The default dialog box procedure for the child window in the lower portion of the <c>General</c> page processes the
            WM_INITDIALOG message before passing it to the <c>HandleMessage</c> method. For all other messages sent to the child window,
            <c>HandleMessage</c> receives the message first. Then the <c>HandleMessage</c> return value determines whether the default
            dialog procedure processes the message or ignores it.
            </para>
            <para>
            If <c>HandleMessage</c> processes the WM_CTLCOLORDLG message, it must return a valid brush handle to painting the background
            of the dialog box. In general, if <c>HandleMessage</c> processes any <c>WM_CTLCOLOR*</c> message, it must return a valid
            brush handle to painting the background of the specified control.
            </para>
            <para>
            Do not call the EndDialog function from the <c>HandleMessage</c> method. Instead, <c>HandleMessage</c> can call the
            PostMessage function to post a WM_COMMAND message with the IDABORT value to the dialog box procedure. Posting <c>IDABORT</c>
            closes the Print Property Sheet and causes PrintDlgEx to return <c>PD_RESULT_CANCEL</c> in the <c>dwResultAction</c> member
            of the PRINTDLGEX structure. If you need to know why <c>HandleMessage</c> closed the dialog box, you must provide your own
            communication mechanism between the <c>HandleMessage</c> method and your application.
            </para>
            <para>
            You can subclass the standard controls of the child dialog box in the lower portion of the <c>General</c> page. These
            standard controls are similar to those found in the <c>Print</c> dialog box. However, the default dialog box procedure may
            also subclass the controls. Because of this, you should subclass controls when <c>HandleMessage</c> processes the
            WM_INITDIALOG message. This ensures that your subclass procedure receives control-specific messages before the subclass
            procedure set by the dialog box procedure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComDlg32.IPrintDialogServices">
            <summary>
            Provides methods that enable an application using the PrintDlgEx function to retrieve information about the currently selected printer.
            </summary>
            <remarks>This printer is indicated on the list of installed printers on the <c>General</c> page of the Print Property Sheet.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.IPrintDialogServices.GetCurrentDevMode(Vanara.PInvoke.DEVMODE@,System.UInt32@)">
            <summary>Fills a DEVMODE structure with information about the currently selected printer for use with PrintDlgEx.</summary>
            <param name="pDevMode">
            <para>Type: <c>LPDEVMODE</c></para>
            <para>A pointer to a buffer that receives a DEVMODE structure containing information about the currently selected printer.</para>
            </param>
            <param name="pcbSize">
            <para>Type: <c>UINT*</c></para>
            <para>
            On input, the variable specifies the size, in bytes, of the buffer pointed to by the lpDevMode parameter. On output, the
            variable contains the number of bytes written to lpDevMode.
            </para>
            <para>
            If the size is zero on input, the function returns the required buffer size (in bytes) in pcbSize and does not use the
            lpDevMode buffer.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If the method is successful, the return value is <c>S_OK</c>. If no printer is currently selected, the return value is
            <c>S_OK</c>, the value returned in pcbSize is zero, and the lpDevMode buffer is unchanged.
            </para>
            <para>If an error occurs, the return value is a COM error code. For more information, see Error Handling.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.IPrintDialogServices.GetCurrentPrinterName(System.Text.StringBuilder,System.UInt32@)">
            <summary>Retrieves the name of the currently selected printer, for use with PrintDlgEx.</summary>
            <param name="pPrinterName">
            <para>Type: <c>LPTSTR</c></para>
            <para>The name of the currently selected printer.</para>
            </param>
            <param name="pcchSize">
            <para>Type: <c>UINT*</c></para>
            <para>
            On input, the variable specifies the size, in characters, of the buffer pointed to by the lpPrinterName parameter. On
            output, the variable contains the number of bytes (ANSI) or characters (Unicode), including the terminating null character,
            written to the buffer.
            </para>
            <para>
            If the size is zero on input, the function returns the required buffer size (in bytes or characters) in pcchSize and does
            not use the lpPrinterName buffer.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If the method is successful, the return value is <c>S_OK</c>. If no printer is currently selected, the return value is
            <c>S_OK</c>, the value returned in pcchSize is zero, and the lpPrinterName buffer is unchanged.
            </para>
            <para>If an error occurs, the return value is a COM error code. For more information, see Error Handling.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.IPrintDialogServices.GetCurrentPortName(System.Text.StringBuilder,System.UInt32@)">
            <summary>Retrieves the name of the current port for use with PrintDlgEx.</summary>
            <param name="pPortName">
            <para>Type: <c>LPTSTR</c></para>
            <para>The name of the current port.</para>
            </param>
            <param name="pcchSize">
            <para>Type: <c>UINT*</c></para>
            <para>
            On input, the variable specifies the size, in characters, of the buffer pointed to by the lpPortName parameter. On output,
            the variable contains the number of bytes (ANSI) or characters (Unicode), including the terminating null character, written
            to the buffer.
            </para>
            <para>
            If the size is zero on input, the function returns the required buffer size (in bytes or characters) in pcchSize and does
            not use the lpPortName buffer.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If the method is successful, the return value is <c>S_OK</c>. If there is no current port, the return value is <c>S_OK</c>,
            the value returned in pcchSize is zero, and the lpPortName buffer is unchanged.
            </para>
            <para>If an error occurs, the return value is a COM error code. For more information, see Error Handling.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.ChooseColor(Vanara.PInvoke.ComDlg32.CHOOSECOLOR@)">
            <summary>Creates a <c>Color</c> dialog box that enables the user to select a color.</summary>
            <param name="lpcc">
            <para>[in, out] Type: <c>LPCHOOSECOLOR</c></para>
            <para>
            A pointer to a <c>CHOOSECOLOR</c> structure that contains information used to initialize the dialog box. When <c>ChooseColor</c>
            returns, this structure contains information about the user's color selection.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user clicks the <c>OK</c> button of the dialog box, the return value is nonzero. The <c>rgbResult</c> member of the
            <c>CHOOSECOLOR</c> structure contains the RGB color value of the color selected by the user.
            </para>
            <para>
            If the user cancels or closes the <c>Color</c> dialog box or an error occurs, the return value is zero. To get extended error
            information, call the <c>CommDlgExtendedError</c> function, which can return one of the following values:
            </para>
            <para><c>CDERR_DIALOGFAILURE</c></para>
            <para><c>CDERR_FINDRESFAILURE</c></para>
            <para><c>CDERR_MEMLOCKFAILURE</c></para>
            <para><c>CDERR_INITIALIZATION</c></para>
            <para><c>CDERR_NOHINSTANCE</c></para>
            <para><c>CDERR_NOHOOK</c></para>
            <para><c>CDERR_LOADRESFAILURE</c></para>
            <para><c>CDERR_NOTEMPLATE</c></para>
            <para><c>CDERR_LOADSTRFAILURE</c></para>
            <para><c>CDERR_STRUCTSIZE</c></para>
            <para><c>CDERR_MEMALLOCFAILURE</c></para>
            </returns>
            <remarks>
            <para>
            The <c>Color</c> dialog box does not support palettes. The color choices offered by the dialog box are limited to the system
            colors and dithered versions of those colors.
            </para>
            <para>
            You can provide a <c>CCHookProc</c> hook procedure for a <c>Color</c> dialog box. The hook procedure can process messages sent
            to the dialog box. To enable a hook procedure, set the <c>CC_ENABLEHOOK</c> flag in the <c>Flags</c> member of the
            <c>CHOOSECOLOR</c> structure and specify the address of the hook procedure in the <c>lpfnHook</c> member.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.ChooseFont(Vanara.PInvoke.ComDlg32.CHOOSEFONT@)">
            <summary>
            Creates a <c>Font</c> dialog box that enables the user to choose attributes for a logical font. These attributes include a font
            family and associated font style, a point size, effects (underline, strikeout, and text color), and a script (or character set).
            </summary>
            <param name="lpcf">
            <para>[in, out] Type: <c>LPCHOOSEFONT</c></para>
            <para>
            A pointer to a <c>CHOOSEFONT</c> structure that contains information used to initialize the dialog box. When <c>ChooseFont</c>
            returns, this structure contains information about the user's font selection.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user clicks the <c>OK</c> button of the dialog box, the return value is <c>TRUE</c>. The members of the <c>CHOOSEFONT</c>
            structure indicate the user's selections.
            </para>
            <para>
            If the user cancels or closes the <c>Font</c> dialog box or an error occurs, the return value is <c>FALSE</c>. To get extended
            error information, call the <c>CommDlgExtendedError</c> function, which can return one of the following values.
            </para>
            <para><c>CDERR_DIALOGFAILURE</c></para>
            <para><c>CDERR_FINDRESFAILURE</c></para>
            <para><c>CDERR_NOHINSTANCE</c></para>
            <para><c>CDERR_INITIALIZATION</c></para>
            <para><c>CDERR_NOHOOK</c></para>
            <para><c>CDERR_LOCKRESFAILURE</c></para>
            <para><c>CDERR_NOTEMPLATE</c></para>
            <para><c>CDERR_LOADRESFAILURE</c></para>
            <para><c>CDERR_STRUCTSIZE</c></para>
            <para><c>CDERR_LOADSTRFAILURE</c></para>
            <para><c>CFERR_MAXLESSTHANMIN</c></para>
            <para><c>CDERR_MEMALLOCFAILURE</c></para>
            <para><c>CFERR_NOFONTS</c></para>
            <para><c>CDERR_MEMLOCKFAILURE</c></para>
            </returns>
            <remarks>
            <para>
            You can provide a <c>CFHookProc</c> hook procedure for a <c>Font</c> dialog box. The hook procedure can process messages sent to
            the dialog box. To enable a hook procedure, set the <c>CF_ENABLEHOOK</c> flag in the <c>Flags</c> member of the
            <c>CHOOSEFONT</c> structure and specify the address of the hook procedure in the <c>lpfnHook</c> member.
            </para>
            <para>
            The hook procedure can send the <c>WM_CHOOSEFONT_GETLOGFONT</c>, <c>WM_CHOOSEFONT_SETFLAGS</c>, and
            <c>WM_CHOOSEFONT_SETLOGFONT</c> messages to the dialog box to get and set the current values and flags of the dialog box.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.CommDlgExtendedError">
            <summary>
            Returns a common dialog box error code. This code indicates the most recent error to occur during the execution of one of the
            common dialog box functions.
            </summary>
            <returns>
            <para>Type: <c>DWORD</c></para>
            <para>
            If the most recent call to a common dialog box function succeeded, the return value is undefined. If the common dialog box
            function returned <c>FALSE</c> because the user closed or canceled the dialog box, the return value is zero. Otherwise, the
            return value is a nonzero error code.
            </para>
            <para>
            The <c>CommDlgExtendedError</c> function can return general error codes for any of the common dialog box functions. In addition,
            there are error codes that are returned only for a specific common dialog box. All of these error codes are defined in Cderr.h.
            The following general error codes can be returned for any of the common dialog box functions.
            </para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CDERR_DIALOGFAILURE 0xFFFF</term>
            <term>
            The dialog box could not be created. The common dialog box function's call to the DialogBox function failed. For example, this
            error occurs if the common dialog box call specifies an invalid window handle.
            </term>
            </item>
            <item>
            <term>CDERR_FINDRESFAILURE 0x0006</term>
            <term>The common dialog box function failed to find a specified resource.</term>
            </item>
            <item>
            <term>CDERR_INITIALIZATION 0x0002</term>
            <term>The common dialog box function failed during initialization. This error often occurs when sufficient memory is not available.</term>
            </item>
            <item>
            <term>CDERR_LOADRESFAILURE 0x0007</term>
            <term>The common dialog box function failed to load a specified resource.</term>
            </item>
            <item>
            <term>CDERR_LOADSTRFAILURE 0x0005</term>
            <term>The common dialog box function failed to load a specified string.</term>
            </item>
            <item>
            <term>CDERR_LOCKRESFAILURE 0x0008</term>
            <term>The common dialog box function failed to lock a specified resource.</term>
            </item>
            <item>
            <term>CDERR_MEMALLOCFAILURE 0x0009</term>
            <term>The common dialog box function was unable to allocate memory for internal structures.</term>
            </item>
            <item>
            <term>CDERR_MEMLOCKFAILURE 0x000A</term>
            <term>The common dialog box function was unable to lock the memory associated with a handle.</term>
            </item>
            <item>
            <term>CDERR_NOHINSTANCE 0x0004</term>
            <term>
            The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but
            you failed to provide a corresponding instance handle.
            </term>
            </item>
            <item>
            <term>CDERR_NOHOOK 0x000B</term>
            <term>
            The ENABLEHOOK flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you
            failed to provide a pointer to a corresponding hook procedure.
            </term>
            </item>
            <item>
            <term>CDERR_NOTEMPLATE 0x0003</term>
            <term>
            The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but
            you failed to provide a corresponding template.
            </term>
            </item>
            <item>
            <term>CDERR_REGISTERMSGFAIL 0x000C</term>
            <term>The RegisterWindowMessage function returned an error code when it was called by the common dialog box function.</term>
            </item>
            <item>
            <term>CDERR_STRUCTSIZE 0x0001</term>
            <term>The lStructSize member of the initialization structure for the corresponding common dialog box is invalid.</term>
            </item>
            </list>
            <para>The following error codes can be returned for the PrintDlg function.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>PDERR_CREATEICFAILURE 0x100A</term>
            <term>The PrintDlg function failed when it attempted to create an information context.</term>
            </item>
            <item>
            <term>PDERR_DEFAULTDIFFERENT 0x100C</term>
            <term>
            You called the PrintDlg function with the DN_DEFAULTPRN flag specified in the wDefault member of the DEVNAMES structure, but the
            printer described by the other structure members did not match the current default printer. This error occurs when you store the
            DEVNAMES structure, and the user changes the default printer by using the Control Panel. To use the printer described by the
            DEVNAMES structure, clear the DN_DEFAULTPRN flag and call PrintDlg again. To use the default printer, replace the DEVNAMES
            structure (and the structure, if one exists) with NULL; and call PrintDlg again.
            </term>
            </item>
            <item>
            <term>PDERR_DNDMMISMATCH 0x1009</term>
            <term>The data in the DEVMODE and DEVNAMES structures describes two different printers.</term>
            </item>
            <item>
            <term>PDERR_GETDEVMODEFAIL 0x1005</term>
            <term>The printer driver failed to initialize a DEVMODE structure.</term>
            </item>
            <item>
            <term>PDERR_INITFAILURE 0x1006</term>
            <term>
            The PrintDlg function failed during initialization, and there is no more specific extended error code to describe the failure.
            This is the generic default error code for the function.
            </term>
            </item>
            <item>
            <term>PDERR_LOADDRVFAILURE 0x1004</term>
            <term>The PrintDlg function failed to load the device driver for the specified printer.</term>
            </item>
            <item>
            <term>PDERR_NODEFAULTPRN 0x1008</term>
            <term>A default printer does not exist.</term>
            </item>
            <item>
            <term>PDERR_NODEVICES 0x1007</term>
            <term>No printer drivers were found.</term>
            </item>
            <item>
            <term>PDERR_PARSEFAILURE 0x1002</term>
            <term>The PrintDlg function failed to parse the strings in the [devices] section of the WIN.INI file.</term>
            </item>
            <item>
            <term>PDERR_PRINTERNOTFOUND 0x100B</term>
            <term>The [devices] section of the WIN.INI file did not contain an entry for the requested printer.</term>
            </item>
            <item>
            <term>PDERR_RETDEFFAILURE 0x1003</term>
            <term>
            The PD_RETURNDEFAULT flag was specified in the Flags member of the PRINTDLG structure, but the hDevMode or hDevNames member was
            not NULL.
            </term>
            </item>
            <item>
            <term>PDERR_SETUPFAILURE 0x1001</term>
            <term>The PrintDlg function failed to load the required resources.</term>
            </item>
            </list>
            <para>The following error codes can be returned for the ChooseFont function.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CFERR_MAXLESSTHANMIN CFERR_MAXLESSTHANMIN</term>
            <term>
            The size specified in the nSizeMax member of the CHOOSEFONT structure is less than the size specified in the nSizeMin member.
            </term>
            </item>
            <item>
            <term>CFERR_NOFONTS 0x2001</term>
            <term>No fonts exist.</term>
            </item>
            </list>
            <para>The following error codes can be returned for the GetOpenFileName and GetSaveFileName functions.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>FNERR_BUFFERTOOSMALL 0x3003</term>
            <term>
            The buffer pointed to by the lpstrFile member of the OPENFILENAME structure is too small for the file name specified by the
            user. The first two bytes of the lpstrFile buffer contain an integer value specifying the size required to receive the full
            name, in characters.
            </term>
            </item>
            <item>
            <term>FNERR_INVALIDFILENAME 0x3002</term>
            <term>A file name is invalid.</term>
            </item>
            <item>
            <term>FNERR_SUBCLASSFAILURE 0x3001</term>
            <term>An attempt to subclass a list box failed because sufficient memory was not available.</term>
            </item>
            </list>
            <para>The following error code can be returned for the FindText and ReplaceText functions.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>FRERR_BUFFERLENGTHZERO 0x4001</term>
            <term>A member of the FINDREPLACE structure points to an invalid buffer.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.FindText(Vanara.PInvoke.ComDlg32.FINDREPLACE@)">
            <summary>
            Creates a system-defined modeless <c>Find</c> dialog box that lets the user specify a string to search for and options to use
            when searching for text in a document.
            </summary>
            <param name="Arg1">
            <para>Type: <c>LPFINDREPLACE</c></para>
            <para>
            A pointer to a FINDREPLACE structure that contains information used to initialize the dialog box. The dialog box uses this
            structure to send information about the user's input to your application. For more information, see the following Remarks section.
            </para>
            </param>
            <returns>
            <para>Type: <c>HWND</c></para>
            <para>
            If the function succeeds, the return value is the window handle to the dialog box. You can use the window handle to communicate
            with or to close the dialog box.
            </para>
            <para>
            If the function fails, the return value is <c>NULL</c>. To get extended error information, call the CommDlgExtendedError
            function. <c>CommDlgExtendedError</c> may return one of the following error codes:
            </para>
            </returns>
            <remarks>
            <para>
            The <c>FindText</c> function does not perform a search operation. Instead, the dialog box sends FINDMSGSTRING registered
            messages to the window procedure of the owner window of the dialog box. When you create the dialog box, the <c>hwndOwner</c>
            member of the FINDREPLACE structure is a handle to the owner window.
            </para>
            <para>
            Before calling <c>FindText</c>, you must call the RegisterWindowMessage function to get the identifier for the FINDMSGSTRING
            message. The dialog box procedure uses this identifier to send messages when the user clicks the <c>Find Next</c> button, or
            when the dialog box is closing. The lParam parameter of the <c>FINDMSGSTRING</c> message contains a pointer to a FINDREPLACE
            structure. The <c>Flags</c> member of this structure indicates the event that caused the message. Other members of the structure
            indicate the user's input.
            </para>
            <para>
            If you create a <c>Find</c> dialog box, you must also use the IsDialogMessage function in the main message loop of your
            application to ensure that the dialog box correctly processes keyboard input, such as the TAB and ESC keys.
            <c>IsDialogMessage</c> returns a value that indicates whether the <c>Find</c> dialog box processed the message.
            </para>
            <para>
            You can provide an FRHookProc hook procedure for a <c>Find</c> dialog box. The hook procedure can process messages sent to the
            dialog box. To enable a hook procedure, set the <c>FR_ENABLEHOOK</c> flag in the <c>Flags</c> member of the FINDREPLACE
            structure and specify the address of the hook procedure in the <c>lpfnHook</c> member.
            </para>
            <para>Examples</para>
            <para>For an example, see Finding Text.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.GetFileTitle(System.String,System.Text.StringBuilder,System.UInt16)">
            <summary>Retrieves the name of the specified file.</summary>
            <param name="arg1">
            <para>Type: <c>LPCTSTR</c></para>
            <para>The name and location of a file.</para>
            </param>
            <param name="Buf">
            <para>Type: <c>LPTSTR</c></para>
            <para>The buffer that receives the name of the file.</para>
            </param>
            <param name="cchSize">
            <para>Type: <c>WORD</c></para>
            <para>The length, in characters, of the buffer pointed to by the lpszTitle parameter.</para>
            </param>
            <returns>
            <para>Type: <c>short</c></para>
            <para>If the function succeeds, the return value is zero.</para>
            <para>If the file name is invalid, the return value is unknown. If there is an error, the return value is a negative number.</para>
            <para>
            If the buffer pointed to by the lpszTitle parameter is too small, the return value is a positive integer that specifies the
            required buffer size, in characters. The required buffer size includes the terminating null character.
            </para>
            </returns>
            <remarks>
            <para><c>GetFileTitle</c> should only be called with legal file names; using an illegal file name has an undefined result.</para>
            <para>
            To get the buffer size needed for the name of a file, call the function with lpszTitle set to <c>NULL</c> and cchSize set to
            zero. The function returns the required size.
            </para>
            <para>
            <c>GetFileTitle</c> returns the string that the system would use to display the file name to the user. The display name includes
            an extension only if that is the user's preference for displaying file names. This means that the returned string may not
            accurately identify the file if it is used in calls to file system functions.
            </para>
            <para>
            If the lpszTitle buffer is too small, <c>GetFileTitle</c> returns the size required to hold the display name. However, there is
            no guaranteed relationship between the required size and the characters originally specified in the lpszFile buffer. For
            example, do not call <c>GetFileTitle</c> with lpszTitle set to <c>NULL</c> and cchSize set to zero, and then try to use the
            return value as an index into the lpszFile string. You can usually achieve similar results (and superior performance) with C
            run-time library functions such as <c>strrchr</c>, <c>wcsrchr</c>, and <c>_mbsrchr</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.GetOpenFileName(Vanara.PInvoke.ComDlg32.OPENFILENAME@)">
            <summary>
            <para>
            [Starting with Windows Vista, the <c>Open</c> and <c>Save As</c> common dialog boxes have been superseded by the Common Item
            Dialog. We recommended that you use the Common Item Dialog API instead of these dialog boxes from the Common Dialog Box Library.]
            </para>
            <para>
            Creates an <c>Open</c> dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened.
            </para>
            </summary>
            <param name="Arg1">
            <para>Type: <c>LPOPENFILENAME</c></para>
            <para>
            A pointer to an OPENFILENAME structure that contains information used to initialize the dialog box. When <c>GetOpenFileName</c>
            returns, this structure contains information about the user's file selection.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user specifies a file name and clicks the <c>OK</c> button, the return value is nonzero. The buffer pointed to by the
            <c>lpstrFile</c> member of the OPENFILENAME structure contains the full path and file name specified by the user.
            </para>
            <para>
            If the user cancels or closes the <c>Open</c> dialog box or an error occurs, the return value is zero. To get extended error
            information, call the CommDlgExtendedError function, which can return one of the following values.
            </para>
            </returns>
            <remarks>
            <para>
            The Explorer-style <c>Open</c> dialog box provides user-interface features that are similar to the Windows Explorer. You can
            provide an OFNHookProc hook procedure for an Explorer-style <c>Open</c> dialog box. To enable the hook procedure, set the
            <c>OFN_EXPLORER</c> and <c>OFN_ENABLEHOOK</c> flags in the <c>Flags</c> member of the OPENFILENAME structure and specify the
            address of the hook procedure in the <c>lpfnHook</c> member.
            </para>
            <para>
            Windows continues to support the old-style <c>Open</c> dialog box for applications that want to maintain a user-interface
            consistent with the old-style user-interface. To display the old-style <c>Open</c> dialog box, enable an OFNHookProcOldStyle
            hook procedure and ensure that the <c>OFN_EXPLORER</c> flag is not set.
            </para>
            <para>To display a dialog box that allows the user to select a directory instead of a file, call the SHBrowseForFolder function.</para>
            <para>Note, when selecting multiple files, the total character limit for the file names depends on the version of the function.</para>
            <list type="bullet">
            <item>
            <term>ANSI: 32k limit</term>
            </item>
            <item>
            <term>Unicode: no restriction</term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example, see Opening a File.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.GetSaveFileName(Vanara.PInvoke.ComDlg32.OPENFILENAME@)">
            <summary>
            <para>
            [Starting with Windows Vista, the <c>Open</c> and <c>Save As</c> common dialog boxes have been superseded by the Common Item
            Dialog. We recommended that you use the Common Item Dialog API instead of these dialog boxes from the Common Dialog Box Library.]
            </para>
            <para>Creates a <c>Save</c> dialog box that lets the user specify the drive, directory, and name of a file to save.</para>
            </summary>
            <param name="Arg1">
            <para>Type: <c>LPOPENFILENAME</c></para>
            <para>
            A pointer to an OPENFILENAME structure that contains information used to initialize the dialog box. When <c>GetSaveFileName</c>
            returns, this structure contains information about the user's file selection.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user specifies a file name and clicks the <c>OK</c> button and the function is successful, the return value is nonzero.
            The buffer pointed to by the <c>lpstrFile</c> member of the OPENFILENAME structure contains the full path and file name
            specified by the user.
            </para>
            <para>
            If the user cancels or closes the <c>Save</c> dialog box or an error such as the file name buffer being too small occurs, the
            return value is zero. To get extended error information, call the CommDlgExtendedError function, which can return one of the
            following values:
            </para>
            </returns>
            <remarks>
            <para>
            The Explorer-style <c>Save</c> dialog box that provides user-interface features that are similar to the Windows Explorer. You
            can provide an OFNHookProc hook procedure for an Explorer-style <c>Save</c> dialog box. To enable the hook procedure, set the
            <c>OFN_EXPLORER</c> and <c>OFN_ENABLEHOOK</c> flags in the <c>Flags</c> member of the OPENFILENAME structure and specify the
            address of the hook procedure in the <c>lpfnHook</c> member.
            </para>
            <para>
            Windows continues to support old-style <c>Save</c> dialog boxes for applications that want to maintain a user-interface
            consistent with the old-style user-interface. To display the old-style <c>Save</c> dialog box, enable an OFNHookProcOldStyle
            hook procedure and ensure that the <c>OFN_EXPLORER</c> flag is not set.
            </para>
            <para>Examples</para>
            <para>For an example, see Creating an Enhanced Metafile.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.PageSetupDlg(Vanara.PInvoke.ComDlg32.PAGESETUPDLG@)">
            <summary>
            Creates a <c>Page Setup</c> dialog box that enables the user to specify the attributes of a printed page. These attributes
            include the paper size and source, the page orientation (portrait or landscape), and the width of the page margins.
            </summary>
            <param name="lppsd">
            <para>[in, out] Type: <c>LPPAGESETUPDLG</c></para>
            <para>
            A pointer to a <c>PAGESETUPDLG</c> structure that contains information used to initialize the dialog box. The structure receives
            information about the user's selections when the function returns.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user clicks the <c>OK</c> button, the return value is nonzero. The members of the <c>PAGESETUPDLG</c> structure pointed
            to by the lppsd parameter indicate the user's selections.
            </para>
            <para>
            If the user cancels or closes the <c>Page Setup</c> dialog box or an error occurs, the return value is zero. To get extended
            error information, use the <c>CommDlgExtendedError</c> function
            </para>
            <para>
            Note that the values of <c>hDevMode</c> and <c>hDevNames</c> in <c>PAGESETUPDLG</c> may change when they are passed into
            <c>PageSetupDlg</c>. This is because these members are filled on both input and output.
            </para>
            </returns>
            <remarks>
            Starting with Windows Vista, the <c>PageSetupDlg</c> does not contain the <c>Printer</c> button. To switch printer selection,
            use <c>PrintDlg</c> or <c>PrintDlgEx</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.PrintDlg(Vanara.PInvoke.ComDlg32.PRINTDLG@)">
            <summary>
            <para>
            [ <c>PrintDlg</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions. Instead, use <c>PrintDlgEx</c> or <c>PageSetupDlg</c>.]
            </para>
            <para>
            Displays a Print Dialog Box or a <c>Print Setup</c> dialog box. The <c>Print</c> dialog box enables the user to specify the
            properties of a particular print job.
            </para>
            </summary>
            <param name="lppd">
            <para>[in, out] Type: <c>LPPRINTDLG</c></para>
            <para>
            A pointer to a <c>PRINTDLG</c> structure that contains information used to initialize the dialog box. When <c>PrintDlg</c>
            returns, this structure contains information about the user's selections.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user clicks the <c>OK</c> button, the return value is nonzero. The members of the <c>PRINTDLG</c> structure pointed to by
            the lppd parameter indicate the user's selections.
            </para>
            <para>
            If the user canceled or closed the <c>Print</c> or <c>Printer Setup</c> dialog box or an error occurred, the return value is
            zero. To get extended error information, use the <c>CommDlgExtendedError</c> function. If the user canceled or closed the dialog
            box, <c>CommDlgExtendedError</c> returns zero; otherwise, it returns one of the following values.
            </para>
            <para><c>CDERR_FINDRESFAILURE</c></para>
            <para><c>CDERR_INITIALIZATION</c></para>
            <para><c>CDERR_LOADRESFAILURE</c></para>
            <para><c>CDERR_LOADSTRFAILURE</c></para>
            <para><c>CDERR_LOCKRESFAILURE</c></para>
            <para><c>CDERR_MEMALLOCFAILURE</c></para>
            <para><c>CDERR_MEMLOCKFAILURE</c></para>
            <para><c>CDERR_NOHINSTANCE</c></para>
            <para><c>CDERR_NOHOOK</c></para>
            <para><c>CDERR_NOTEMPLATE</c></para>
            <para><c>CDERR_STRUCTSIZE</c></para>
            <para><c>PDERR_CREATEICFAILURE</c></para>
            <para><c>PDERR_DEFAULTDIFFERENT</c></para>
            <para><c>PDERR_DNDMMISMATCH</c></para>
            <para><c>PDERR_GETDEVMODEFAIL</c></para>
            <para><c>PDERR_INITFAILURE</c></para>
            <para><c>PDERR_LOADDRVFAILURE</c></para>
            <para><c>PDERR_NODEFAULTPRN</c></para>
            <para><c>PDERR_NODEVICES</c></para>
            <para><c>PDERR_PARSEFAILURE</c></para>
            <para><c>PDERR_PRINTERNOTFOUND</c></para>
            <para><c>PDERR_RETDEFFAILURE</c></para>
            </returns>
            <remarks>
            <para>
            If the hook procedure (pointed to by the <c>lpfnPrintHook</c> or <c>lpfnSetupHook</c> member of the <c>PRINTDLG</c> structure)
            processes the <c>WM_CTLCOLORDLG</c> message, the hook procedure must return a handle to the brush that should be used to paint
            the control background.
            </para>
            <para>
            Note that the values of <c>hDevMode</c> and <c>hDevNames</c> in <c>PRINTDLG</c> may change when they are passed into
            <c>PrintDlg</c>. This is because these members are filled on both input and output.
            </para>
            <para>To switch printer selection, use <c>PrintDlg</c> or <c>PrintDlgEx</c>.</para>
            <para><c>Windows Server 2003, Windows XP, and Windows 2000:</c> To switch printer selection, use the <c>Printer</c> button</para>
            <para>
            <c>Known issue:</c> If <c>PD_RETURNDC</c> is set but <c>PD_USEDEVMODECOPIESANDCOLLATE</c> flag is not set, the <c>PrintDlgEx</c>
            and <c>PrintDlg</c> functions return incorrect number of copies. To get the correct number of copies, ensure that the calling
            application always uses <c>PD_USEDEVMODECOPIESANDCOLLATE</c> with <c>PD_RETURNDC</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.PrintDlgEx(Vanara.PInvoke.ComDlg32.PRINTDLGEX@)">
            <summary>
            Displays a <c>Print</c> property sheet that enables the user to specify the properties of a particular print job. A <c>Print</c>
            property sheet has a <c>General</c> page that contains controls similar to the <c>Print</c> dialog box. The property sheet can
            also have additional application-specific and driver-specific property pages as well as the <c>General</c> page.
            </summary>
            <param name="lppd">
            <para>[in, out] Type: <c>LPPRINTDLGEX</c></para>
            <para>
            A pointer to a <c>PRINTDLGEX</c> structure that contains information used to initialize the property sheet. When
            <c>PrintDlgEx</c> returns, this structure contains information about the user's selections.
            </para>
            <para>This structure must be declared dynamically using a memory allocation function.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If the function succeeds, the return value is <c>S_OK</c> and the <c>dwResultAction</c> member of the <c>PRINTDLGEX</c>
            structure contains one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>PD_RESULT_APPLY 2</term>
            <term>
            The user clicked the Apply button and later clicked the Cancel button. This indicates that the user wants to apply the changes
            made in the property sheet, but does not yet want to print. The PRINTDLGEX structure contains the information specified by the
            user at the time the Apply button was clicked.
            </term>
            </item>
            <item>
            <term>PD_RESULT_CANCEL 0</term>
            <term>The user clicked the Cancel button. The information in the PRINTDLGEX structure is unchanged.</term>
            </item>
            <item>
            <term>PD_RESULT_PRINT 1</term>
            <term>The user clicked the Print button. The PRINTDLGEX structure contains the information specified by the user.</term>
            </item>
            </list>
            <para>If the function fails, the return value may be one of the following COM error codes. For more information, see Error Handling.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Insufficient memory.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are invalid.</term>
            </item>
            <item>
            <term>E_POINTER</term>
            <term>Invalid pointer.</term>
            </item>
            <item>
            <term>E_HANDLE</term>
            <term>Invalid handle.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>Unspecified error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The values of <c>hDevMode</c> and <c>hDevNames</c> in <c>PRINTDLGEX</c> may change when they are passed into <c>PrintDlgEx</c>.
            This is because these members are filled on both input and output. Be sure to free the memory allocated for these members
            </para>
            <para>
            If <c>PD_RETURNDC</c> is set but <c>PD_USEDEVMODECOPIESANDCOLLATE</c> flag is not set, the <c>PrintDlg</c> and <c>PrintDlgEx</c>
            functions return incorrect number of copies. To get the correct number of copies, ensure that the calling application always
            uses <c>PD_USEDEVMODECOPIESANDCOLLATE</c> with <c>PD_RETURNDC</c>.
            </para>
            <para>For more information, see Print Property Sheet.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComDlg32.ReplaceText(Vanara.PInvoke.ComDlg32.FINDREPLACE@)">
            <summary>
            Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string, as well
            as options to control the find and replace operations.
            </summary>
            <param name="Arg1">
            <para>Type: <c>LPFINDREPLACE</c></para>
            <para>
            A pointer to a FINDREPLACE structure that contains information used to initialize the dialog box. The dialog box uses this
            structure to send information about the user's input to your application. For more information, see the following Remarks section.
            </para>
            </param>
            <returns>
            <para>Type: <c>HWND</c></para>
            <para>
            If the function succeeds, the return value is the window handle to the dialog box. You can use the window handle to communicate
            with the dialog box or close it.
            </para>
            <para>
            If the function fails, the return value is <c>NULL</c>. To get extended error information, call the CommDlgExtendedError
            function, which can return one of the following error codes:
            </para>
            </returns>
            <remarks>
            <para>
            The <c>ReplaceText</c> function does not perform a text replacement operation. Instead, the dialog box sends FINDMSGSTRING
            registered messages to the window procedure of the owner window of the dialog box. When you create the dialog box, the
            <c>hwndOwner</c> member of the FINDREPLACE structure is a handle to the owner window.
            </para>
            <para>
            Before calling <c>ReplaceText</c>, you must call the RegisterWindowMessage function to get the identifier for the FINDMSGSTRING
            message. The dialog box procedure uses this identifier to send messages when the user clicks the <c>Find Next</c>,
            <c>Replace</c>, or <c>Replace All</c> buttons, or when the dialog box is closing. The lParam parameter of a <c>FINDMSGSTRING</c>
            message contains a pointer to the FINDREPLACE structure. The <c>Flags</c> member of this structure indicates the event that
            caused the message. Other members of the structure indicate the user's input.
            </para>
            <para>
            If you create a <c>Replace</c> dialog box, you must also use the IsDialogMessage function in the main message loop of your
            application to ensure that the dialog box correctly processes keyboard input, such as the TAB and ESC keys. The
            <c>IsDialogMessage</c> function returns a value that indicates whether the Replace dialog box processed the message.
            </para>
            <para>
            You can provide an FRHookProc hook procedure for a <c>Replace</c> dialog box. The hook procedure can process messages sent to
            the dialog box. To enable a hook procedure, set the <c>FR_ENABLEHOOK</c> flag in the <c>Flags</c> member of the FINDREPLACE
            structure and specify the address of the hook procedure in the <c>lpfnHook</c> member.
            </para>
            </remarks>
        </member>
    </members>
</doc>
